//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DLL.Repos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InvoiceProcessingEntities : DbContext
    {
        public InvoiceProcessingEntities()
            : base("name=InvoiceProcessingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<SYS_MENURIGHTS> SYS_MENURIGHTS { get; set; }
        public virtual DbSet<SYS_USERMASTER> SYS_USERMASTER { get; set; }
        public virtual DbSet<TBL_APPMATRIX> TBL_APPMATRIX { get; set; }
        public virtual DbSet<TBL_APPROVALSTATUS> TBL_APPROVALSTATUS { get; set; }
        public virtual DbSet<TBL_APPROVALUSERS> TBL_APPROVALUSERS { get; set; }
        public virtual DbSet<TBL_BarcodeGen> TBL_BarcodeGen { get; set; }
        public virtual DbSet<TBL_BarcodeGenMaster> TBL_BarcodeGenMaster { get; set; }
        public virtual DbSet<TBL_BRANCHINVOICEOUTWARD> TBL_BRANCHINVOICEOUTWARD { get; set; }
        public virtual DbSet<tbl_CityMaster> tbl_CityMaster { get; set; }
        public virtual DbSet<tbl_CostCenterMaster> tbl_CostCenterMaster { get; set; }
        public virtual DbSet<tbl_CountryMaster> tbl_CountryMaster { get; set; }
        public virtual DbSet<TBL_COURIERINWARD> TBL_COURIERINWARD { get; set; }
        public virtual DbSet<TBL_COURIERINWARD_Hist> TBL_COURIERINWARD_Hist { get; set; }
        public virtual DbSet<TBL_CurrencyTypeMaster> TBL_CurrencyTypeMaster { get; set; }
        public virtual DbSet<tbl_EntityGSTMapping> tbl_EntityGSTMapping { get; set; }
        public virtual DbSet<tbl_EntityMaster> tbl_EntityMaster { get; set; }
        public virtual DbSet<tbl_GLCodeMaster> tbl_GLCodeMaster { get; set; }
        public virtual DbSet<tbl_GRNItemDetails> tbl_GRNItemDetails { get; set; }
        public virtual DbSet<tbl_GRNMaster> tbl_GRNMaster { get; set; }
        public virtual DbSet<tbl_InvoiceApprovalMatrix_AP> tbl_InvoiceApprovalMatrix_AP { get; set; }
        public virtual DbSet<tbl_InvoiceCheckListMaster> tbl_InvoiceCheckListMaster { get; set; }
        public virtual DbSet<tbl_InvoiceChecklistStatus> tbl_InvoiceChecklistStatus { get; set; }
        public virtual DbSet<tbl_InvoiceGSTDetails> tbl_InvoiceGSTDetails { get; set; }
        public virtual DbSet<TBL_Mailroom_InwardOutward> TBL_Mailroom_InwardOutward { get; set; }
        public virtual DbSet<tbl_Mapping_OrgTypeDocument> tbl_Mapping_OrgTypeDocument { get; set; }
        public virtual DbSet<tbl_OCRInvoiceItemDetails> tbl_OCRInvoiceItemDetails { get; set; }
        public virtual DbSet<tbl_OCRProcess_MailRoom> tbl_OCRProcess_MailRoom { get; set; }
        public virtual DbSet<tbl_PincodeMaster> tbl_PincodeMaster { get; set; }
        public virtual DbSet<tbl_PlantMaster> tbl_PlantMaster { get; set; }
        public virtual DbSet<TBL_PO> TBL_PO { get; set; }
        public virtual DbSet<TBL_PortalMaster> TBL_PortalMaster { get; set; }
        public virtual DbSet<TBL_QCProcess_MailRoom> TBL_QCProcess_MailRoom { get; set; }
        public virtual DbSet<tbl_QueueBenchMark> tbl_QueueBenchMark { get; set; }
        public virtual DbSet<tbl_RejectionDetails_MailRoom> tbl_RejectionDetails_MailRoom { get; set; }
        public virtual DbSet<tbl_RejectionMaster_APProcess> tbl_RejectionMaster_APProcess { get; set; }
        public virtual DbSet<tbl_RejectionMaster_MailRoom> tbl_RejectionMaster_MailRoom { get; set; }
        public virtual DbSet<tbl_RejectionMatrix> tbl_RejectionMatrix { get; set; }
        public virtual DbSet<tbl_ReportMaster_AP> tbl_ReportMaster_AP { get; set; }
        public virtual DbSet<tbl_ReportMaster_MP> tbl_ReportMaster_MP { get; set; }
        public virtual DbSet<tbl_ReportMaster_VP> tbl_ReportMaster_VP { get; set; }
        public virtual DbSet<TBL_RoleMaster> TBL_RoleMaster { get; set; }
        public virtual DbSet<tbl_SACTDSMaster> tbl_SACTDSMaster { get; set; }
        public virtual DbSet<TBL_SBUMASTER> TBL_SBUMASTER { get; set; }
        public virtual DbSet<tbl_StateMaster> tbl_StateMaster { get; set; }
        public virtual DbSet<TBL_SUPPORTINGDOCMASTER> TBL_SUPPORTINGDOCMASTER { get; set; }
        public virtual DbSet<tbl_TDSSectionMaster> tbl_TDSSectionMaster { get; set; }
        public virtual DbSet<tbl_TDSSubSectionMaster> tbl_TDSSubSectionMaster { get; set; }
        public virtual DbSet<TBL_UserEntityPlantDet> TBL_UserEntityPlantDet { get; set; }
        public virtual DbSet<TBL_USERGROUPMAPPING> TBL_USERGROUPMAPPING { get; set; }
        public virtual DbSet<TBL_USERROLEMAPPING> TBL_USERROLEMAPPING { get; set; }
        public virtual DbSet<tbl_VendorGSTMapping> tbl_VendorGSTMapping { get; set; }
        public virtual DbSet<tbl_VendorInvoiceUpload> tbl_VendorInvoiceUpload { get; set; }
        public virtual DbSet<TBL_VENDORMASATER> TBL_VENDORMASATER { get; set; }
        public virtual DbSet<tbl_VendorPOMapping> tbl_VendorPOMapping { get; set; }
        public virtual DbSet<tbl_VendorRegist_DocDetails> tbl_VendorRegist_DocDetails { get; set; }
        public virtual DbSet<tbl_VendorRegist_DocDetails_Hist> tbl_VendorRegist_DocDetails_Hist { get; set; }
        public virtual DbSet<tbl_VendorRegistrationMaster> tbl_VendorRegistrationMaster { get; set; }
        public virtual DbSet<tbl_VendorRegistrationMaster_Hist> tbl_VendorRegistrationMaster_Hist { get; set; }
        public virtual DbSet<TBL_VendorRequisition> TBL_VendorRequisition { get; set; }
        public virtual DbSet<tbl_VendorStateMaster> tbl_VendorStateMaster { get; set; }
        public virtual DbSet<TBL_ZONEMASTER> TBL_ZONEMASTER { get; set; }
        public virtual DbSet<SY_KEY_VALUES> SY_KEY_VALUES { get; set; }
        public virtual DbSet<SY_KEY_VALUES_BK> SY_KEY_VALUES_BK { get; set; }
        public virtual DbSet<SY_KEY_VALUES_BK1> SY_KEY_VALUES_BK1 { get; set; }
        public virtual DbSet<tbl_apikey> tbl_apikey { get; set; }
        public virtual DbSet<tbl_AutoGenerateGRNCode> tbl_AutoGenerateGRNCode { get; set; }
        public virtual DbSet<TBL_BarcodeGen_Old> TBL_BarcodeGen_Old { get; set; }
        public virtual DbSet<TBL_BarcodeGenMaster_Old> TBL_BarcodeGenMaster_Old { get; set; }
        public virtual DbSet<TBL_BRANCHMASTER> TBL_BRANCHMASTER { get; set; }
        public virtual DbSet<TBL_BUSINESSSEGMENT> TBL_BUSINESSSEGMENT { get; set; }
        public virtual DbSet<TBL_COMPANYMASTER> TBL_COMPANYMASTER { get; set; }
        public virtual DbSet<TBL_COURIERINWARD_Hist_Old> TBL_COURIERINWARD_Hist_Old { get; set; }
        public virtual DbSet<TBL_COURIERMASTER> TBL_COURIERMASTER { get; set; }
        public virtual DbSet<TBL_DASHBOARD_Queue> TBL_DASHBOARD_Queue { get; set; }
        public virtual DbSet<TBL_DELOCATIONMASTER> TBL_DELOCATIONMASTER { get; set; }
        public virtual DbSet<TBL_DEPARTMENTMASTER> TBL_DEPARTMENTMASTER { get; set; }
        public virtual DbSet<TBL_EMPCODEMASTER> TBL_EMPCODEMASTER { get; set; }
        public virtual DbSet<tbl_EntityMaster_021121> tbl_EntityMaster_021121 { get; set; }
        public virtual DbSet<TBL_EXPTYPEMASTER> TBL_EXPTYPEMASTER { get; set; }
        public virtual DbSet<TBL_FUNCTIONMASTER> TBL_FUNCTIONMASTER { get; set; }
        public virtual DbSet<tbl_GLCodeMaster_021121> tbl_GLCodeMaster_021121 { get; set; }
        public virtual DbSet<tbl_GRNItemDetails_021121> tbl_GRNItemDetails_021121 { get; set; }
        public virtual DbSet<tbl_GRNItemDetails_230222> tbl_GRNItemDetails_230222 { get; set; }
        public virtual DbSet<tbl_GRNMaster_021121> tbl_GRNMaster_021121 { get; set; }
        public virtual DbSet<tbl_GRNMaster_230222> tbl_GRNMaster_230222 { get; set; }
        public virtual DbSet<TBL_GROUPMASTER> TBL_GROUPMASTER { get; set; }
        public virtual DbSet<TBL_GROUPMASTER_191021> TBL_GROUPMASTER_191021 { get; set; }
        public virtual DbSet<TBL_GROUPMASTER_BK> TBL_GROUPMASTER_BK { get; set; }
        public virtual DbSet<TBL_GROUPMASTER_BK1> TBL_GROUPMASTER_BK1 { get; set; }
        public virtual DbSet<TBL_GROUPMASTER_BK100> TBL_GROUPMASTER_BK100 { get; set; }
        public virtual DbSet<TBL_INVOEXPCODEMAP> TBL_INVOEXPCODEMAP { get; set; }
        public virtual DbSet<TBL_INVOICESTAGINGDATA> TBL_INVOICESTAGINGDATA { get; set; }
        public virtual DbSet<TBL_INVOICETYPEMASTER> TBL_INVOICETYPEMASTER { get; set; }
        public virtual DbSet<TBL_INVOTAXCODEMAP> TBL_INVOTAXCODEMAP { get; set; }
        public virtual DbSet<tbl_ItemMaster> tbl_ItemMaster { get; set; }
        public virtual DbSet<TBL_JOBNUMBER> TBL_JOBNUMBER { get; set; }
        public virtual DbSet<tbl_lineitem_new> tbl_lineitem_new { get; set; }
        public virtual DbSet<tbl_lineitem_new_BK1> tbl_lineitem_new_BK1 { get; set; }
        public virtual DbSet<TBL_LOCATIONMASTER> TBL_LOCATIONMASTER { get; set; }
        public virtual DbSet<TBL_MISCCODEMASTER> TBL_MISCCODEMASTER { get; set; }
        public virtual DbSet<tbl_OCRInvoiceItemDetails_BK1> tbl_OCRInvoiceItemDetails_BK1 { get; set; }
        public virtual DbSet<tbl_OCRProcess_MailRoom_BK1> tbl_OCRProcess_MailRoom_BK1 { get; set; }
        public virtual DbSet<tbl_PlantMaster_Old> tbl_PlantMaster_Old { get; set; }
        public virtual DbSet<TBL_PO_021121> TBL_PO_021121 { get; set; }
        public virtual DbSet<TBL_PO_230222> TBL_PO_230222 { get; set; }
        public virtual DbSet<TBL_PO_DETAILS> TBL_PO_DETAILS { get; set; }
        public virtual DbSet<TBL_PO_DETAILS_021121> TBL_PO_DETAILS_021121 { get; set; }
        public virtual DbSet<TBL_PO_DETAILS_23022022> TBL_PO_DETAILS_23022022 { get; set; }
        public virtual DbSet<TBL_Query_DesMaster> TBL_Query_DesMaster { get; set; }
        public virtual DbSet<tbl_SACTDSMaster_021121> tbl_SACTDSMaster_021121 { get; set; }
        public virtual DbSet<TBL_SBUBLPRDMASTER> TBL_SBUBLPRDMASTER { get; set; }
        public virtual DbSet<tbl_sbutypemaster> tbl_sbutypemaster { get; set; }
        public virtual DbSet<TBL_USERGROUPMAPPING_BK> TBL_USERGROUPMAPPING_BK { get; set; }
    
        [DbFunction("InvoiceProcessingEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string rowData, string delimeter)
        {
            var rowDataParameter = rowData != null ?
                new ObjectParameter("RowData", rowData) :
                new ObjectParameter("RowData", typeof(string));
    
            var delimeterParameter = delimeter != null ?
                new ObjectParameter("Delimeter", delimeter) :
                new ObjectParameter("Delimeter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[InvoiceProcessingEntities].[Split](@RowData, @Delimeter)", rowDataParameter, delimeterParameter);
        }
    
        [DbFunction("InvoiceProcessingEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[InvoiceProcessingEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual int A_TruncateTbl()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("A_TruncateTbl");
        }
    
        public virtual int A_TruncateTbl_User()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("A_TruncateTbl_User");
        }
    
        public virtual ObjectResult<proc_apikey_Result> proc_apikey()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_apikey_Result>("proc_apikey");
        }
    
        public virtual int proc_Insertocr(string inwardID, string fileName, string filePath, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Insertocr", inwardIDParameter, fileNameParameter, filePathParameter, msg);
        }
    
        public virtual int proc_Updateapikey(string apikey)
        {
            var apikeyParameter = apikey != null ?
                new ObjectParameter("apikey", apikey) :
                new ObjectParameter("apikey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Updateapikey", apikeyParameter);
        }
    
        public virtual int Save_ApprovalMatrixData_17(Nullable<int> sP_USERID, string sP_VendorName, Nullable<int> sP_Level1Name, Nullable<int> sP_Level2Name, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_USERIDParameter = sP_USERID.HasValue ?
                new ObjectParameter("SP_USERID", sP_USERID) :
                new ObjectParameter("SP_USERID", typeof(int));
    
            var sP_VendorNameParameter = sP_VendorName != null ?
                new ObjectParameter("SP_VendorName", sP_VendorName) :
                new ObjectParameter("SP_VendorName", typeof(string));
    
            var sP_Level1NameParameter = sP_Level1Name.HasValue ?
                new ObjectParameter("SP_Level1Name", sP_Level1Name) :
                new ObjectParameter("SP_Level1Name", typeof(int));
    
            var sP_Level2NameParameter = sP_Level2Name.HasValue ?
                new ObjectParameter("SP_Level2Name", sP_Level2Name) :
                new ObjectParameter("SP_Level2Name", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Save_ApprovalMatrixData_17", sP_USERIDParameter, sP_VendorNameParameter, sP_Level1NameParameter, sP_Level2NameParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int SP_AddEditRejectionMatrix(Nullable<int> iD, string vendorID, string plantID, string departmentID, string pOType, Nullable<int> rejectUserID, string rejectionEmailID, string nCUserType, ObjectParameter sP_Message)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            var pOTypeParameter = pOType != null ?
                new ObjectParameter("POType", pOType) :
                new ObjectParameter("POType", typeof(string));
    
            var rejectUserIDParameter = rejectUserID.HasValue ?
                new ObjectParameter("RejectUserID", rejectUserID) :
                new ObjectParameter("RejectUserID", typeof(int));
    
            var rejectionEmailIDParameter = rejectionEmailID != null ?
                new ObjectParameter("RejectionEmailID", rejectionEmailID) :
                new ObjectParameter("RejectionEmailID", typeof(string));
    
            var nCUserTypeParameter = nCUserType != null ?
                new ObjectParameter("NCUserType", nCUserType) :
                new ObjectParameter("NCUserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddEditRejectionMatrix", iDParameter, vendorIDParameter, plantIDParameter, departmentIDParameter, pOTypeParameter, rejectUserIDParameter, rejectionEmailIDParameter, nCUserTypeParameter, sP_Message);
        }
    
        public virtual int SP_AddEditRoles(ObjectParameter sP_RoleID, Nullable<int> sP_PortalID, string sP_RoleName, string isActive, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_PortalIDParameter = sP_PortalID.HasValue ?
                new ObjectParameter("SP_PortalID", sP_PortalID) :
                new ObjectParameter("SP_PortalID", typeof(int));
    
            var sP_RoleNameParameter = sP_RoleName != null ?
                new ObjectParameter("SP_RoleName", sP_RoleName) :
                new ObjectParameter("SP_RoleName", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddEditRoles", sP_RoleID, sP_PortalIDParameter, sP_RoleNameParameter, isActiveParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int SP_AddEditVendorRequisition(Nullable<int> createdBy, string query_Type, string query_SubType, string @ref, string query_Desc, string attachment, ObjectParameter sP_MESSAGE, ObjectParameter ticketID)
        {
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var query_TypeParameter = query_Type != null ?
                new ObjectParameter("Query_Type", query_Type) :
                new ObjectParameter("Query_Type", typeof(string));
    
            var query_SubTypeParameter = query_SubType != null ?
                new ObjectParameter("Query_SubType", query_SubType) :
                new ObjectParameter("Query_SubType", typeof(string));
    
            var refParameter = @ref != null ?
                new ObjectParameter("Ref", @ref) :
                new ObjectParameter("Ref", typeof(string));
    
            var query_DescParameter = query_Desc != null ?
                new ObjectParameter("Query_Desc", query_Desc) :
                new ObjectParameter("Query_Desc", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddEditVendorRequisition", createdByParameter, query_TypeParameter, query_SubTypeParameter, refParameter, query_DescParameter, attachmentParameter, sP_MESSAGE, ticketID);
        }
    
        public virtual int SP_AddQueryResolution(string sP_QueryID, string sP_Error_Severity, string sP_ErrorType, string sP_ErrorAccept, string sP_userComment, string sP_CAPAReq, string sP_CAPARootCause, string sP_CorrectiveAction, string sP_PreventiveAction, string sP_QueryStatus, Nullable<int> sP_UpdatedBy, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_QueryIDParameter = sP_QueryID != null ?
                new ObjectParameter("SP_QueryID", sP_QueryID) :
                new ObjectParameter("SP_QueryID", typeof(string));
    
            var sP_Error_SeverityParameter = sP_Error_Severity != null ?
                new ObjectParameter("SP_Error_Severity", sP_Error_Severity) :
                new ObjectParameter("SP_Error_Severity", typeof(string));
    
            var sP_ErrorTypeParameter = sP_ErrorType != null ?
                new ObjectParameter("SP_ErrorType", sP_ErrorType) :
                new ObjectParameter("SP_ErrorType", typeof(string));
    
            var sP_ErrorAcceptParameter = sP_ErrorAccept != null ?
                new ObjectParameter("SP_ErrorAccept", sP_ErrorAccept) :
                new ObjectParameter("SP_ErrorAccept", typeof(string));
    
            var sP_userCommentParameter = sP_userComment != null ?
                new ObjectParameter("SP_userComment", sP_userComment) :
                new ObjectParameter("SP_userComment", typeof(string));
    
            var sP_CAPAReqParameter = sP_CAPAReq != null ?
                new ObjectParameter("SP_CAPAReq", sP_CAPAReq) :
                new ObjectParameter("SP_CAPAReq", typeof(string));
    
            var sP_CAPARootCauseParameter = sP_CAPARootCause != null ?
                new ObjectParameter("SP_CAPARootCause", sP_CAPARootCause) :
                new ObjectParameter("SP_CAPARootCause", typeof(string));
    
            var sP_CorrectiveActionParameter = sP_CorrectiveAction != null ?
                new ObjectParameter("SP_CorrectiveAction", sP_CorrectiveAction) :
                new ObjectParameter("SP_CorrectiveAction", typeof(string));
    
            var sP_PreventiveActionParameter = sP_PreventiveAction != null ?
                new ObjectParameter("SP_PreventiveAction", sP_PreventiveAction) :
                new ObjectParameter("SP_PreventiveAction", typeof(string));
    
            var sP_QueryStatusParameter = sP_QueryStatus != null ?
                new ObjectParameter("SP_QueryStatus", sP_QueryStatus) :
                new ObjectParameter("SP_QueryStatus", typeof(string));
    
            var sP_UpdatedByParameter = sP_UpdatedBy.HasValue ?
                new ObjectParameter("SP_UpdatedBy", sP_UpdatedBy) :
                new ObjectParameter("SP_UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddQueryResolution", sP_QueryIDParameter, sP_Error_SeverityParameter, sP_ErrorTypeParameter, sP_ErrorAcceptParameter, sP_userCommentParameter, sP_CAPAReqParameter, sP_CAPARootCauseParameter, sP_CorrectiveActionParameter, sP_PreventiveActionParameter, sP_QueryStatusParameter, sP_UpdatedByParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual ObjectResult<SP_BarcodeReport_Result> SP_BarcodeReport(string location, string segment)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BarcodeReport_Result>("SP_BarcodeReport", locationParameter, segmentParameter);
        }
    
        public virtual ObjectResult<SP_BindBarcodeGenPlanMaster_Result> SP_BindBarcodeGenPlanMaster(string empCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BindBarcodeGenPlanMaster_Result>("SP_BindBarcodeGenPlanMaster", empCodeParameter);
        }
    
        public virtual ObjectResult<SP_BindEntityMaster_Result> SP_BindEntityMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BindEntityMaster_Result>("SP_BindEntityMaster");
        }
    
        public virtual ObjectResult<SP_BindOutwardPlanMaster_Result> SP_BindOutwardPlanMaster(string sP_PORTALID, string plantID)
        {
            var sP_PORTALIDParameter = sP_PORTALID != null ?
                new ObjectParameter("SP_PORTALID", sP_PORTALID) :
                new ObjectParameter("SP_PORTALID", typeof(string));
    
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BindOutwardPlanMaster_Result>("SP_BindOutwardPlanMaster", sP_PORTALIDParameter, plantIDParameter);
        }
    
        public virtual ObjectResult<SP_BindPlanMaster_Result> SP_BindPlanMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BindPlanMaster_Result>("SP_BindPlanMaster");
        }
    
        public virtual int SP_CheckBarcodeExist(string location, string segment, string barcode, ObjectParameter sP_Message)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckBarcodeExist", locationParameter, segmentParameter, barcodeParameter, sP_Message);
        }
    
        public virtual int SP_CheckBarcodeReceivedORNO(string barcode, ObjectParameter sP_Message)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckBarcodeReceivedORNO", barcodeParameter, sP_Message);
        }
    
        public virtual int SP_CheckReceivedBarCount(string location, string segment, ObjectParameter sP_Message)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckReceivedBarCount", locationParameter, segmentParameter, sP_Message);
        }
    
        public virtual int SP_CheckReceivedCount(string location, string segment, ObjectParameter sP_Message)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckReceivedCount", locationParameter, segmentParameter, sP_Message);
        }
    
        public virtual int SP_CheckSeriesBarcodeExist(string barcode, ObjectParameter sP_Message)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckSeriesBarcodeExist", barcodeParameter, sP_Message);
        }
    
        public virtual int SP_CheckSeriesBarcodeReceived(string barcode, ObjectParameter sP_Message)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckSeriesBarcodeReceived", barcodeParameter, sP_Message);
        }
    
        public virtual int Sp_CreateVendorUser(string sP_EMPCode, string sP_EMPNAME, string sP_EMAILID, string sP_LOGINPASSWORD, ObjectParameter sP_RETURNVALUE)
        {
            var sP_EMPCodeParameter = sP_EMPCode != null ?
                new ObjectParameter("SP_EMPCode", sP_EMPCode) :
                new ObjectParameter("SP_EMPCode", typeof(string));
    
            var sP_EMPNAMEParameter = sP_EMPNAME != null ?
                new ObjectParameter("SP_EMPNAME", sP_EMPNAME) :
                new ObjectParameter("SP_EMPNAME", typeof(string));
    
            var sP_EMAILIDParameter = sP_EMAILID != null ?
                new ObjectParameter("SP_EMAILID", sP_EMAILID) :
                new ObjectParameter("SP_EMAILID", typeof(string));
    
            var sP_LOGINPASSWORDParameter = sP_LOGINPASSWORD != null ?
                new ObjectParameter("SP_LOGINPASSWORD", sP_LOGINPASSWORD) :
                new ObjectParameter("SP_LOGINPASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CreateVendorUser", sP_EMPCodeParameter, sP_EMPNAMEParameter, sP_EMAILIDParameter, sP_LOGINPASSWORDParameter, sP_RETURNVALUE);
        }
    
        public virtual ObjectResult<SP_Dashboard_DATA_Main_Result> SP_Dashboard_DATA_Main(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Dashboard_DATA_Main_Result>("SP_Dashboard_DATA_Main", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_Dashboard_DATA_Main_18092021_Result> SP_Dashboard_DATA_Main_18092021(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Dashboard_DATA_Main_18092021_Result>("SP_Dashboard_DATA_Main_18092021", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_Dashboard_DATA_Main_280821_Result> SP_Dashboard_DATA_Main_280821(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Dashboard_DATA_Main_280821_Result>("SP_Dashboard_DATA_Main_280821", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_Admin(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_Admin", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_Admin_111021(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_Admin_111021", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_Admin_1210(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_Admin_1210", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_Admin_191021(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_Admin_191021", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_Admin_26_11_21(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_Admin_26_11_21", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_User(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_User", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_User_111021(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_User_111021", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_User_191021(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_User_191021", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_Main_User_26_11_21(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_Main_User_26_11_21", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_NCUser(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_NCUser", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_NCUser_26_11_21(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_NCUser_26_11_21", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_Dashboard_DATA_NCUser_27_10_21(string plantNames, string userType, string userID)
        {
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dashboard_DATA_NCUser_27_10_21", plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_Dashboard_POPUP_Result> SP_Dashboard_POPUP(string queueName, string pOType, string plantNames, string userType, string userID, string invoiceID)
        {
            var queueNameParameter = queueName != null ?
                new ObjectParameter("QueueName", queueName) :
                new ObjectParameter("QueueName", typeof(string));
    
            var pOTypeParameter = pOType != null ?
                new ObjectParameter("POType", pOType) :
                new ObjectParameter("POType", typeof(string));
    
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var invoiceIDParameter = invoiceID != null ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Dashboard_POPUP_Result>("SP_Dashboard_POPUP", queueNameParameter, pOTypeParameter, plantNamesParameter, userTypeParameter, userIDParameter, invoiceIDParameter);
        }
    
        public virtual ObjectResult<SP_Dashboard_POPUP_1210_Result> SP_Dashboard_POPUP_1210(string queueName, string pOType, string plantNames, string userType, string userID, string invoiceID)
        {
            var queueNameParameter = queueName != null ?
                new ObjectParameter("QueueName", queueName) :
                new ObjectParameter("QueueName", typeof(string));
    
            var pOTypeParameter = pOType != null ?
                new ObjectParameter("POType", pOType) :
                new ObjectParameter("POType", typeof(string));
    
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var invoiceIDParameter = invoiceID != null ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Dashboard_POPUP_1210_Result>("SP_Dashboard_POPUP_1210", queueNameParameter, pOTypeParameter, plantNamesParameter, userTypeParameter, userIDParameter, invoiceIDParameter);
        }
    
        public virtual ObjectResult<SP_Dashboard_POPUP_191021_Result> SP_Dashboard_POPUP_191021(string queueName, string pOType, string plantNames, string userType, string userID, string invoiceID)
        {
            var queueNameParameter = queueName != null ?
                new ObjectParameter("QueueName", queueName) :
                new ObjectParameter("QueueName", typeof(string));
    
            var pOTypeParameter = pOType != null ?
                new ObjectParameter("POType", pOType) :
                new ObjectParameter("POType", typeof(string));
    
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var invoiceIDParameter = invoiceID != null ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Dashboard_POPUP_191021_Result>("SP_Dashboard_POPUP_191021", queueNameParameter, pOTypeParameter, plantNamesParameter, userTypeParameter, userIDParameter, invoiceIDParameter);
        }
    
        public virtual ObjectResult<SP_Dashboard_POPUP_26_11_21_Result> SP_Dashboard_POPUP_26_11_21(string queueName, string pOType, string plantNames, string userType, string userID, string invoiceID)
        {
            var queueNameParameter = queueName != null ?
                new ObjectParameter("QueueName", queueName) :
                new ObjectParameter("QueueName", typeof(string));
    
            var pOTypeParameter = pOType != null ?
                new ObjectParameter("POType", pOType) :
                new ObjectParameter("POType", typeof(string));
    
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var invoiceIDParameter = invoiceID != null ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Dashboard_POPUP_26_11_21_Result>("SP_Dashboard_POPUP_26_11_21", queueNameParameter, pOTypeParameter, plantNamesParameter, userTypeParameter, userIDParameter, invoiceIDParameter);
        }
    
        public virtual ObjectResult<SP_Get_GenratedTicketData_Result> SP_Get_GenratedTicketData(string ticketNo)
        {
            var ticketNoParameter = ticketNo != null ?
                new ObjectParameter("TicketNo", ticketNo) :
                new ObjectParameter("TicketNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Get_GenratedTicketData_Result>("SP_Get_GenratedTicketData", ticketNoParameter);
        }
    
        public virtual ObjectResult<SP_Get_Mailroom_InwardData_Result> SP_Get_Mailroom_InwardData(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Get_Mailroom_InwardData_Result>("SP_Get_Mailroom_InwardData", iDParameter);
        }
    
        public virtual ObjectResult<SP_Get_Mailroom_OwtwardData_Result> SP_Get_Mailroom_OwtwardData(string iS_Inward)
        {
            var iS_InwardParameter = iS_Inward != null ?
                new ObjectParameter("IS_Inward", iS_Inward) :
                new ObjectParameter("IS_Inward", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Get_Mailroom_OwtwardData_Result>("SP_Get_Mailroom_OwtwardData", iS_InwardParameter);
        }
    
        public virtual int SP_Get_NotRecievedBarcodeData(string location, string segment, ObjectParameter sP_Message)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Get_NotRecievedBarcodeData", locationParameter, segmentParameter, sP_Message);
        }
    
        public virtual int SP_Get_QuerySearchData(string queryID, string fromDate, string toDate, string queryType)
        {
            var queryIDParameter = queryID != null ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Get_QuerySearchData", queryIDParameter, fromDateParameter, toDateParameter, queryTypeParameter);
        }
    
        public virtual ObjectResult<SP_GetApprovalMatrixData_Result> SP_GetApprovalMatrixData(string sP_VENDORID, Nullable<int> sP_ApprovalLevelId, Nullable<int> sP_Level1Name, Nullable<int> sP_Level2Name)
        {
            var sP_VENDORIDParameter = sP_VENDORID != null ?
                new ObjectParameter("SP_VENDORID", sP_VENDORID) :
                new ObjectParameter("SP_VENDORID", typeof(string));
    
            var sP_ApprovalLevelIdParameter = sP_ApprovalLevelId.HasValue ?
                new ObjectParameter("SP_ApprovalLevelId", sP_ApprovalLevelId) :
                new ObjectParameter("SP_ApprovalLevelId", typeof(int));
    
            var sP_Level1NameParameter = sP_Level1Name.HasValue ?
                new ObjectParameter("SP_Level1Name", sP_Level1Name) :
                new ObjectParameter("SP_Level1Name", typeof(int));
    
            var sP_Level2NameParameter = sP_Level2Name.HasValue ?
                new ObjectParameter("SP_Level2Name", sP_Level2Name) :
                new ObjectParameter("SP_Level2Name", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetApprovalMatrixData_Result>("SP_GetApprovalMatrixData", sP_VENDORIDParameter, sP_ApprovalLevelIdParameter, sP_Level1NameParameter, sP_Level2NameParameter);
        }
    
        public virtual ObjectResult<SP_GetBarcodeDiscardSeriesData_Result> SP_GetBarcodeDiscardSeriesData(string location, string segment)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBarcodeDiscardSeriesData_Result>("SP_GetBarcodeDiscardSeriesData", locationParameter, segmentParameter);
        }
    
        public virtual ObjectResult<SP_GetBarcodeReceivedSeriesData_Result> SP_GetBarcodeReceivedSeriesData(string location, string segment)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBarcodeReceivedSeriesData_Result>("SP_GetBarcodeReceivedSeriesData", locationParameter, segmentParameter);
        }
    
        public virtual ObjectResult<SP_GetBarcodeReceivedSeriesData_20_11_21_Result> SP_GetBarcodeReceivedSeriesData_20_11_21(string location, string segment)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBarcodeReceivedSeriesData_20_11_21_Result>("SP_GetBarcodeReceivedSeriesData_20_11_21", locationParameter, segmentParameter);
        }
    
        public virtual ObjectResult<SP_GetBarcodeSeriesData_Result> SP_GetBarcodeSeriesData(string location, string segment)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBarcodeSeriesData_Result>("SP_GetBarcodeSeriesData", locationParameter, segmentParameter);
        }
    
        public virtual ObjectResult<SP_GetDashboard_Queue_Result> SP_GetDashboard_Queue(string userType)
        {
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDashboard_Queue_Result>("SP_GetDashboard_Queue", userTypeParameter);
        }
    
        public virtual ObjectResult<SP_GetDepartmentMaster_Result> SP_GetDepartmentMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDepartmentMaster_Result>("SP_GetDepartmentMaster");
        }
    
        public virtual ObjectResult<SP_GetEntityEdit_Result> SP_GetEntityEdit(string empCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEntityEdit_Result>("SP_GetEntityEdit", empCodeParameter);
        }
    
        public virtual ObjectResult<SP_GetEntityPlantEdit_Result> SP_GetEntityPlantEdit(string empCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEntityPlantEdit_Result>("SP_GetEntityPlantEdit", empCodeParameter);
        }
    
        public virtual ObjectResult<SP_GetGroupMaster_Result> SP_GetGroupMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetGroupMaster_Result>("SP_GetGroupMaster");
        }
    
        public virtual ObjectResult<SP_GetNC_InwardIDData_Result> SP_GetNC_InwardIDData(string inwardID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNC_InwardIDData_Result>("SP_GetNC_InwardIDData", inwardIDParameter);
        }
    
        public virtual ObjectResult<SP_GetNCRejectList_Result> SP_GetNCRejectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNCRejectList_Result>("SP_GetNCRejectList");
        }
    
        public virtual ObjectResult<SP_GetNCRItemDetails_Result> SP_GetNCRItemDetails(string pONO)
        {
            var pONOParameter = pONO != null ?
                new ObjectParameter("PONO", pONO) :
                new ObjectParameter("PONO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNCRItemDetails_Result>("SP_GetNCRItemDetails", pONOParameter);
        }
    
        public virtual int SP_GetNewBarcodeGenData(string location, string segment, string finYr, ObjectParameter sP_Message)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            var finYrParameter = finYr != null ?
                new ObjectParameter("FinYr", finYr) :
                new ObjectParameter("FinYr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetNewBarcodeGenData", locationParameter, segmentParameter, finYrParameter, sP_Message);
        }
    
        public virtual int SP_GetNewBarcodeGenData_UniqueSrNo(string location, string segment, string finYr, ObjectParameter sP_Message)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            var finYrParameter = finYr != null ?
                new ObjectParameter("FinYr", finYr) :
                new ObjectParameter("FinYr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetNewBarcodeGenData_UniqueSrNo", locationParameter, segmentParameter, finYrParameter, sP_Message);
        }
    
        public virtual ObjectResult<SP_GetPlantByEntity_Result> SP_GetPlantByEntity(string entityID)
        {
            var entityIDParameter = entityID != null ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPlantByEntity_Result>("SP_GetPlantByEntity", entityIDParameter);
        }
    
        public virtual ObjectResult<SP_GetProtalMaster_Result> SP_GetProtalMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProtalMaster_Result>("SP_GetProtalMaster");
        }
    
        public virtual ObjectResult<SP_GetRejectionDataByID_Result> SP_GetRejectionDataByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRejectionDataByID_Result>("SP_GetRejectionDataByID", iDParameter);
        }
    
        public virtual ObjectResult<SP_GetRejetionMatrixData_Result> SP_GetRejetionMatrixData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRejetionMatrixData_Result>("SP_GetRejetionMatrixData");
        }
    
        public virtual ObjectResult<SP_GetRoleEdit_Result> SP_GetRoleEdit(string empCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRoleEdit_Result>("SP_GetRoleEdit", empCodeParameter);
        }
    
        public virtual ObjectResult<SP_GetRoleMaster_Result> SP_GetRoleMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRoleMaster_Result>("SP_GetRoleMaster");
        }
    
        public virtual ObjectResult<SP_GetRolesByPortal_Result> SP_GetRolesByPortal(string portalID)
        {
            var portalIDParameter = portalID != null ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRolesByPortal_Result>("SP_GetRolesByPortal", portalIDParameter);
        }
    
        public virtual ObjectResult<SP_GetRolesDetails_Result> SP_GetRolesDetails(Nullable<int> sP_Portal)
        {
            var sP_PortalParameter = sP_Portal.HasValue ?
                new ObjectParameter("SP_Portal", sP_Portal) :
                new ObjectParameter("SP_Portal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRolesDetails_Result>("SP_GetRolesDetails", sP_PortalParameter);
        }
    
        public virtual ObjectResult<Sp_GetRoleWiseDetails_Result> Sp_GetRoleWiseDetails(Nullable<int> sP_RoleID)
        {
            var sP_RoleIDParameter = sP_RoleID.HasValue ?
                new ObjectParameter("SP_RoleID", sP_RoleID) :
                new ObjectParameter("SP_RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetRoleWiseDetails_Result>("Sp_GetRoleWiseDetails", sP_RoleIDParameter);
        }
    
        public virtual ObjectResult<SP_GetTicket_ResolutionData_Result> SP_GetTicket_ResolutionData(string sp_TicketNo)
        {
            var sp_TicketNoParameter = sp_TicketNo != null ?
                new ObjectParameter("Sp_TicketNo", sp_TicketNo) :
                new ObjectParameter("Sp_TicketNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTicket_ResolutionData_Result>("SP_GetTicket_ResolutionData", sp_TicketNoParameter);
        }
    
        public virtual ObjectResult<SP_GetTicketData_Result> SP_GetTicketData(Nullable<int> userID, string status)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTicketData_Result>("SP_GetTicketData", userIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<SP_GetUserMasterData_Result> SP_GetUserMasterData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserMasterData_Result>("SP_GetUserMasterData");
        }
    
        public virtual ObjectResult<SP_GetUsersIDList_Result> SP_GetUsersIDList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUsersIDList_Result>("SP_GetUsersIDList");
        }
    
        public virtual ObjectResult<string> SP_GetUsersMailID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetUsersMailID", userIDParameter);
        }
    
        public virtual ObjectResult<string> SP_GetUsersPlantName(string empCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetUsersPlantName", empCodeParameter);
        }
    
        public virtual ObjectResult<SP_GetVendorData_Result> SP_GetVendorData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetVendorData_Result>("SP_GetVendorData");
        }
    
        public virtual ObjectResult<SP_GetVendorsData_Result> SP_GetVendorsData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetVendorsData_Result>("SP_GetVendorsData");
        }
    
        public virtual int SP_InsertBarcodeGenDetails(string location, string segment, string seriesStart, string seriesEnd, Nullable<int> noBarcode, Nullable<int> createdBy, ObjectParameter output)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            var seriesStartParameter = seriesStart != null ?
                new ObjectParameter("SeriesStart", seriesStart) :
                new ObjectParameter("SeriesStart", typeof(string));
    
            var seriesEndParameter = seriesEnd != null ?
                new ObjectParameter("SeriesEnd", seriesEnd) :
                new ObjectParameter("SeriesEnd", typeof(string));
    
            var noBarcodeParameter = noBarcode.HasValue ?
                new ObjectParameter("NoBarcode", noBarcode) :
                new ObjectParameter("NoBarcode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBarcodeGenDetails", locationParameter, segmentParameter, seriesStartParameter, seriesEndParameter, noBarcodeParameter, createdByParameter, output);
        }
    
        public virtual int SP_InsertBarcodeGenDetails_20_11_21(string location, string segment, string seriesStart, string seriesEnd, Nullable<int> noBarcode, Nullable<int> createdBy, ObjectParameter output)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var segmentParameter = segment != null ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(string));
    
            var seriesStartParameter = seriesStart != null ?
                new ObjectParameter("SeriesStart", seriesStart) :
                new ObjectParameter("SeriesStart", typeof(string));
    
            var seriesEndParameter = seriesEnd != null ?
                new ObjectParameter("SeriesEnd", seriesEnd) :
                new ObjectParameter("SeriesEnd", typeof(string));
    
            var noBarcodeParameter = noBarcode.HasValue ?
                new ObjectParameter("NoBarcode", noBarcode) :
                new ObjectParameter("NoBarcode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBarcodeGenDetails_20_11_21", locationParameter, segmentParameter, seriesStartParameter, seriesEndParameter, noBarcodeParameter, createdByParameter, output);
        }
    
        public virtual int SP_InsertBarcodeMasterDetails(string barcode, Nullable<int> barcodeGenID, Nullable<int> createdBy, ObjectParameter sP_Message)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var barcodeGenIDParameter = barcodeGenID.HasValue ?
                new ObjectParameter("BarcodeGenID", barcodeGenID) :
                new ObjectParameter("BarcodeGenID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBarcodeMasterDetails", barcodeParameter, barcodeGenIDParameter, createdByParameter, sP_Message);
        }
    
        public virtual int SP_InsertBarcodeMasterDetails_20_11_21(string barcode, Nullable<int> createdBy, ObjectParameter sP_Message)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBarcodeMasterDetails_20_11_21", barcodeParameter, createdByParameter, sP_Message);
        }
    
        public virtual int SP_InsertBarcodeMasterDetails_UniqueSrNo(string startWith, string barcode, Nullable<int> createdBy, ObjectParameter sP_Message)
        {
            var startWithParameter = startWith != null ?
                new ObjectParameter("StartWith", startWith) :
                new ObjectParameter("StartWith", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBarcodeMasterDetails_UniqueSrNo", startWithParameter, barcodeParameter, createdByParameter, sP_Message);
        }
    
        public virtual ObjectResult<SP_INVOICE_REINITIATE_LIST_Result> SP_INVOICE_REINITIATE_LIST(string queueName, string pOType, string plantNames, string userType, string userID)
        {
            var queueNameParameter = queueName != null ?
                new ObjectParameter("QueueName", queueName) :
                new ObjectParameter("QueueName", typeof(string));
    
            var pOTypeParameter = pOType != null ?
                new ObjectParameter("POType", pOType) :
                new ObjectParameter("POType", typeof(string));
    
            var plantNamesParameter = plantNames != null ?
                new ObjectParameter("PlantNames", plantNames) :
                new ObjectParameter("PlantNames", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_INVOICE_REINITIATE_LIST_Result>("SP_INVOICE_REINITIATE_LIST", queueNameParameter, pOTypeParameter, plantNamesParameter, userTypeParameter, userIDParameter);
        }
    
        public virtual int SP_RemoveTicket(string sp_TicketID, ObjectParameter sP_MESSAGE)
        {
            var sp_TicketIDParameter = sp_TicketID != null ?
                new ObjectParameter("Sp_TicketID", sp_TicketID) :
                new ObjectParameter("Sp_TicketID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RemoveTicket", sp_TicketIDParameter, sP_MESSAGE);
        }
    
        public virtual int SP_SaveInwardData(Nullable<int> iD, Nullable<System.DateTime> receivedDate, Nullable<int> noofInvoice, Nullable<int> noofPages, Nullable<int> noofNPInvoice, Nullable<int> noofNPPages, string remark, Nullable<int> inwardBy, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var noofInvoiceParameter = noofInvoice.HasValue ?
                new ObjectParameter("NoofInvoice", noofInvoice) :
                new ObjectParameter("NoofInvoice", typeof(int));
    
            var noofPagesParameter = noofPages.HasValue ?
                new ObjectParameter("NoofPages", noofPages) :
                new ObjectParameter("NoofPages", typeof(int));
    
            var noofNPInvoiceParameter = noofNPInvoice.HasValue ?
                new ObjectParameter("NoofNPInvoice", noofNPInvoice) :
                new ObjectParameter("NoofNPInvoice", typeof(int));
    
            var noofNPPagesParameter = noofNPPages.HasValue ?
                new ObjectParameter("NoofNPPages", noofNPPages) :
                new ObjectParameter("NoofNPPages", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var inwardByParameter = inwardBy.HasValue ?
                new ObjectParameter("InwardBy", inwardBy) :
                new ObjectParameter("InwardBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveInwardData", iDParameter, receivedDateParameter, noofInvoiceParameter, noofPagesParameter, noofNPInvoiceParameter, noofNPPagesParameter, remarkParameter, inwardByParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int SP_SaveNCR_RejectData(string pONO, string inwardID, string status, string statusRemark, Nullable<int> createdBy, ObjectParameter sP_Message)
        {
            var pONOParameter = pONO != null ?
                new ObjectParameter("PONO", pONO) :
                new ObjectParameter("PONO", typeof(string));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusRemarkParameter = statusRemark != null ?
                new ObjectParameter("StatusRemark", statusRemark) :
                new ObjectParameter("StatusRemark", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveNCR_RejectData", pONOParameter, inwardIDParameter, statusParameter, statusRemarkParameter, createdByParameter, sP_Message);
        }
    
        public virtual int SP_UpdateBarcodeDiscard(string startWith, string barcode, string discard_Reason, Nullable<int> userId, ObjectParameter sP_Message)
        {
            var startWithParameter = startWith != null ?
                new ObjectParameter("StartWith", startWith) :
                new ObjectParameter("StartWith", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var discard_ReasonParameter = discard_Reason != null ?
                new ObjectParameter("Discard_Reason", discard_Reason) :
                new ObjectParameter("Discard_Reason", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateBarcodeDiscard", startWithParameter, barcodeParameter, discard_ReasonParameter, userIdParameter, sP_Message);
        }
    
        public virtual int SP_UpdateBarcodeReceipt(string startWith, string barcode, Nullable<int> userId, ObjectParameter sP_Message)
        {
            var startWithParameter = startWith != null ?
                new ObjectParameter("StartWith", startWith) :
                new ObjectParameter("StartWith", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateBarcodeReceipt", startWithParameter, barcodeParameter, userIdParameter, sP_Message);
        }
    
        public virtual int Sys_DeleteGroupMapping_New(string sP_EmpCode)
        {
            var sP_EmpCodeParameter = sP_EmpCode != null ?
                new ObjectParameter("SP_EmpCode", sP_EmpCode) :
                new ObjectParameter("SP_EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sys_DeleteGroupMapping_New", sP_EmpCodeParameter);
        }
    
        public virtual ObjectResult<Sys_ForgotPassword_Result> Sys_ForgotPassword(string sP_EmailId, string sP_EmpCode, ObjectParameter sP_RETURNVALUE)
        {
            var sP_EmailIdParameter = sP_EmailId != null ?
                new ObjectParameter("SP_EmailId", sP_EmailId) :
                new ObjectParameter("SP_EmailId", typeof(string));
    
            var sP_EmpCodeParameter = sP_EmpCode != null ?
                new ObjectParameter("SP_EmpCode", sP_EmpCode) :
                new ObjectParameter("SP_EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_ForgotPassword_Result>("Sys_ForgotPassword", sP_EmailIdParameter, sP_EmpCodeParameter, sP_RETURNVALUE);
        }
    
        public virtual ObjectResult<Sys_GetAllUserDetails_Result> Sys_GetAllUserDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_GetAllUserDetails_Result>("Sys_GetAllUserDetails");
        }
    
        public virtual ObjectResult<Sys_GetEntityUserDetails_Result> Sys_GetEntityUserDetails(Nullable<int> sP_USERID)
        {
            var sP_USERIDParameter = sP_USERID.HasValue ?
                new ObjectParameter("SP_USERID", sP_USERID) :
                new ObjectParameter("SP_USERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_GetEntityUserDetails_Result>("Sys_GetEntityUserDetails", sP_USERIDParameter);
        }
    
        public virtual ObjectResult<Sys_GetOutwardEntryData_Result> Sys_GetOutwardEntryData(Nullable<int> sP_USERID, string fromDate, string toDate, string plantName)
        {
            var sP_USERIDParameter = sP_USERID.HasValue ?
                new ObjectParameter("SP_USERID", sP_USERID) :
                new ObjectParameter("SP_USERID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var plantNameParameter = plantName != null ?
                new ObjectParameter("PlantName", plantName) :
                new ObjectParameter("PlantName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_GetOutwardEntryData_Result>("Sys_GetOutwardEntryData", sP_USERIDParameter, fromDateParameter, toDateParameter, plantNameParameter);
        }
    
        public virtual ObjectResult<Sys_GetSendMailTo_Result> Sys_GetSendMailTo(string sP_InwardID, string sP_VenderCode, string sP_Level)
        {
            var sP_InwardIDParameter = sP_InwardID != null ?
                new ObjectParameter("SP_InwardID", sP_InwardID) :
                new ObjectParameter("SP_InwardID", typeof(string));
    
            var sP_VenderCodeParameter = sP_VenderCode != null ?
                new ObjectParameter("SP_VenderCode", sP_VenderCode) :
                new ObjectParameter("SP_VenderCode", typeof(string));
    
            var sP_LevelParameter = sP_Level != null ?
                new ObjectParameter("SP_Level", sP_Level) :
                new ObjectParameter("SP_Level", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_GetSendMailTo_Result>("Sys_GetSendMailTo", sP_InwardIDParameter, sP_VenderCodeParameter, sP_LevelParameter);
        }
    
        public virtual ObjectResult<Sys_GetUserDetails_Result> Sys_GetUserDetails(Nullable<int> sP_USERID)
        {
            var sP_USERIDParameter = sP_USERID.HasValue ?
                new ObjectParameter("SP_USERID", sP_USERID) :
                new ObjectParameter("SP_USERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_GetUserDetails_Result>("Sys_GetUserDetails", sP_USERIDParameter);
        }
    
        public virtual int Sys_SaveOutwardEntryData(string sP_SENTMODE, string sP_PLANTID, string sP_DOCKETNUM, Nullable<System.DateTime> sP_SENT_DT, string sP_NO_OF_INVOICES, string sP_NO_OF_PAGES, Nullable<int> sP_LOGINID, string sP_REMARK, Nullable<int> courierID, Nullable<int> handoverUserID, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_SENTMODEParameter = sP_SENTMODE != null ?
                new ObjectParameter("SP_SENTMODE", sP_SENTMODE) :
                new ObjectParameter("SP_SENTMODE", typeof(string));
    
            var sP_PLANTIDParameter = sP_PLANTID != null ?
                new ObjectParameter("SP_PLANTID", sP_PLANTID) :
                new ObjectParameter("SP_PLANTID", typeof(string));
    
            var sP_DOCKETNUMParameter = sP_DOCKETNUM != null ?
                new ObjectParameter("SP_DOCKETNUM", sP_DOCKETNUM) :
                new ObjectParameter("SP_DOCKETNUM", typeof(string));
    
            var sP_SENT_DTParameter = sP_SENT_DT.HasValue ?
                new ObjectParameter("SP_SENT_DT", sP_SENT_DT) :
                new ObjectParameter("SP_SENT_DT", typeof(System.DateTime));
    
            var sP_NO_OF_INVOICESParameter = sP_NO_OF_INVOICES != null ?
                new ObjectParameter("SP_NO_OF_INVOICES", sP_NO_OF_INVOICES) :
                new ObjectParameter("SP_NO_OF_INVOICES", typeof(string));
    
            var sP_NO_OF_PAGESParameter = sP_NO_OF_PAGES != null ?
                new ObjectParameter("SP_NO_OF_PAGES", sP_NO_OF_PAGES) :
                new ObjectParameter("SP_NO_OF_PAGES", typeof(string));
    
            var sP_LOGINIDParameter = sP_LOGINID.HasValue ?
                new ObjectParameter("SP_LOGINID", sP_LOGINID) :
                new ObjectParameter("SP_LOGINID", typeof(int));
    
            var sP_REMARKParameter = sP_REMARK != null ?
                new ObjectParameter("SP_REMARK", sP_REMARK) :
                new ObjectParameter("SP_REMARK", typeof(string));
    
            var courierIDParameter = courierID.HasValue ?
                new ObjectParameter("CourierID", courierID) :
                new ObjectParameter("CourierID", typeof(int));
    
            var handoverUserIDParameter = handoverUserID.HasValue ?
                new ObjectParameter("HandoverUserID", handoverUserID) :
                new ObjectParameter("HandoverUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sys_SaveOutwardEntryData", sP_SENTMODEParameter, sP_PLANTIDParameter, sP_DOCKETNUMParameter, sP_SENT_DTParameter, sP_NO_OF_INVOICESParameter, sP_NO_OF_PAGESParameter, sP_LOGINIDParameter, sP_REMARKParameter, courierIDParameter, handoverUserIDParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int Sys_SaveUsermaster(ObjectParameter sP_USERID, string sP_EMPCode, string sP_EMPNAME, string sP_EMAILID, string sP_USER_TYPE, Nullable<decimal> sP_DEPTID, Nullable<decimal> sP_BRANCH, string sP_LOGINPASSWORD, string sP_Portal, string sP_IsActive, Nullable<int> sP_LOGINID, string sP_ROLEID, string sP_USERMBNO, string sP_USER_LANDLINE, string sP_USER_DOB, string sP_USER_ENTITY, string sP_USER_PLANT, string userType, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_EMPCodeParameter = sP_EMPCode != null ?
                new ObjectParameter("SP_EMPCode", sP_EMPCode) :
                new ObjectParameter("SP_EMPCode", typeof(string));
    
            var sP_EMPNAMEParameter = sP_EMPNAME != null ?
                new ObjectParameter("SP_EMPNAME", sP_EMPNAME) :
                new ObjectParameter("SP_EMPNAME", typeof(string));
    
            var sP_EMAILIDParameter = sP_EMAILID != null ?
                new ObjectParameter("SP_EMAILID", sP_EMAILID) :
                new ObjectParameter("SP_EMAILID", typeof(string));
    
            var sP_USER_TYPEParameter = sP_USER_TYPE != null ?
                new ObjectParameter("SP_USER_TYPE", sP_USER_TYPE) :
                new ObjectParameter("SP_USER_TYPE", typeof(string));
    
            var sP_DEPTIDParameter = sP_DEPTID.HasValue ?
                new ObjectParameter("SP_DEPTID", sP_DEPTID) :
                new ObjectParameter("SP_DEPTID", typeof(decimal));
    
            var sP_BRANCHParameter = sP_BRANCH.HasValue ?
                new ObjectParameter("SP_BRANCH", sP_BRANCH) :
                new ObjectParameter("SP_BRANCH", typeof(decimal));
    
            var sP_LOGINPASSWORDParameter = sP_LOGINPASSWORD != null ?
                new ObjectParameter("SP_LOGINPASSWORD", sP_LOGINPASSWORD) :
                new ObjectParameter("SP_LOGINPASSWORD", typeof(string));
    
            var sP_PortalParameter = sP_Portal != null ?
                new ObjectParameter("SP_Portal", sP_Portal) :
                new ObjectParameter("SP_Portal", typeof(string));
    
            var sP_IsActiveParameter = sP_IsActive != null ?
                new ObjectParameter("SP_IsActive", sP_IsActive) :
                new ObjectParameter("SP_IsActive", typeof(string));
    
            var sP_LOGINIDParameter = sP_LOGINID.HasValue ?
                new ObjectParameter("SP_LOGINID", sP_LOGINID) :
                new ObjectParameter("SP_LOGINID", typeof(int));
    
            var sP_ROLEIDParameter = sP_ROLEID != null ?
                new ObjectParameter("SP_ROLEID", sP_ROLEID) :
                new ObjectParameter("SP_ROLEID", typeof(string));
    
            var sP_USERMBNOParameter = sP_USERMBNO != null ?
                new ObjectParameter("SP_USERMBNO", sP_USERMBNO) :
                new ObjectParameter("SP_USERMBNO", typeof(string));
    
            var sP_USER_LANDLINEParameter = sP_USER_LANDLINE != null ?
                new ObjectParameter("SP_USER_LANDLINE", sP_USER_LANDLINE) :
                new ObjectParameter("SP_USER_LANDLINE", typeof(string));
    
            var sP_USER_DOBParameter = sP_USER_DOB != null ?
                new ObjectParameter("SP_USER_DOB", sP_USER_DOB) :
                new ObjectParameter("SP_USER_DOB", typeof(string));
    
            var sP_USER_ENTITYParameter = sP_USER_ENTITY != null ?
                new ObjectParameter("SP_USER_ENTITY", sP_USER_ENTITY) :
                new ObjectParameter("SP_USER_ENTITY", typeof(string));
    
            var sP_USER_PLANTParameter = sP_USER_PLANT != null ?
                new ObjectParameter("SP_USER_PLANT", sP_USER_PLANT) :
                new ObjectParameter("SP_USER_PLANT", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sys_SaveUsermaster", sP_USERID, sP_EMPCodeParameter, sP_EMPNAMEParameter, sP_EMAILIDParameter, sP_USER_TYPEParameter, sP_DEPTIDParameter, sP_BRANCHParameter, sP_LOGINPASSWORDParameter, sP_PortalParameter, sP_IsActiveParameter, sP_LOGINIDParameter, sP_ROLEIDParameter, sP_USERMBNOParameter, sP_USER_LANDLINEParameter, sP_USER_DOBParameter, sP_USER_ENTITYParameter, sP_USER_PLANTParameter, userTypeParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int Sys_UpdatePassword(string sP_EmailId, string sP_EmpCode, string sP_Password, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_EmailIdParameter = sP_EmailId != null ?
                new ObjectParameter("SP_EmailId", sP_EmailId) :
                new ObjectParameter("SP_EmailId", typeof(string));
    
            var sP_EmpCodeParameter = sP_EmpCode != null ?
                new ObjectParameter("SP_EmpCode", sP_EmpCode) :
                new ObjectParameter("SP_EmpCode", typeof(string));
    
            var sP_PasswordParameter = sP_Password != null ?
                new ObjectParameter("SP_Password", sP_Password) :
                new ObjectParameter("SP_Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sys_UpdatePassword", sP_EmailIdParameter, sP_EmpCodeParameter, sP_PasswordParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int Sys_UserEntityPlantRightsAdd(string sP_EmpCode, string entityID, string plantID, string createdBy, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_EmpCodeParameter = sP_EmpCode != null ?
                new ObjectParameter("SP_EmpCode", sP_EmpCode) :
                new ObjectParameter("SP_EmpCode", typeof(string));
    
            var entityIDParameter = entityID != null ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(string));
    
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sys_UserEntityPlantRightsAdd", sP_EmpCodeParameter, entityIDParameter, plantIDParameter, createdByParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int Sys_UserMenuRightsAdd_New(string sP_USERID, Nullable<int> gROUPID, string mENUID, string isActive, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_USERIDParameter = sP_USERID != null ?
                new ObjectParameter("SP_USERID", sP_USERID) :
                new ObjectParameter("SP_USERID", typeof(string));
    
            var gROUPIDParameter = gROUPID.HasValue ?
                new ObjectParameter("GROUPID", gROUPID) :
                new ObjectParameter("GROUPID", typeof(int));
    
            var mENUIDParameter = mENUID != null ?
                new ObjectParameter("MENUID", mENUID) :
                new ObjectParameter("MENUID", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sys_UserMenuRightsAdd_New", sP_USERIDParameter, gROUPIDParameter, mENUIDParameter, isActiveParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int Sys_UserMenuRightsDelete_New(Nullable<int> sP_GroupID, ObjectParameter sP_MESSAGE)
        {
            var sP_GroupIDParameter = sP_GroupID.HasValue ?
                new ObjectParameter("SP_GroupID", sP_GroupID) :
                new ObjectParameter("SP_GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sys_UserMenuRightsDelete_New", sP_GroupIDParameter, sP_MESSAGE);
        }
    
        public virtual int Sys_UserRoleRightsAdd(string sP_EmpCode, string roleID, string sP_IsActive, Nullable<int> sP_USERID, ObjectParameter sP_MESSAGE, ObjectParameter sP_RETURNVALUE)
        {
            var sP_EmpCodeParameter = sP_EmpCode != null ?
                new ObjectParameter("SP_EmpCode", sP_EmpCode) :
                new ObjectParameter("SP_EmpCode", typeof(string));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var sP_IsActiveParameter = sP_IsActive != null ?
                new ObjectParameter("SP_IsActive", sP_IsActive) :
                new ObjectParameter("SP_IsActive", typeof(string));
    
            var sP_USERIDParameter = sP_USERID.HasValue ?
                new ObjectParameter("SP_USERID", sP_USERID) :
                new ObjectParameter("SP_USERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sys_UserRoleRightsAdd", sP_EmpCodeParameter, roleIDParameter, sP_IsActiveParameter, sP_USERIDParameter, sP_MESSAGE, sP_RETURNVALUE);
        }
    
        public virtual int USP_APValidation_LockUnlock(string inwardID, Nullable<int> sP_UserID, string sP_IsLock, ObjectParameter sP_MESSAGE)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var sP_UserIDParameter = sP_UserID.HasValue ?
                new ObjectParameter("SP_UserID", sP_UserID) :
                new ObjectParameter("SP_UserID", typeof(int));
    
            var sP_IsLockParameter = sP_IsLock != null ?
                new ObjectParameter("SP_IsLock", sP_IsLock) :
                new ObjectParameter("SP_IsLock", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_APValidation_LockUnlock", inwardIDParameter, sP_UserIDParameter, sP_IsLockParameter, sP_MESSAGE);
        }
    
        public virtual int USP_CHANGEPASSWORD(Nullable<int> sP_USERID, string sP_NEWPASSWORD, string sP_OLDPASSWORD, ObjectParameter sP_MESSAGE)
        {
            var sP_USERIDParameter = sP_USERID.HasValue ?
                new ObjectParameter("SP_USERID", sP_USERID) :
                new ObjectParameter("SP_USERID", typeof(int));
    
            var sP_NEWPASSWORDParameter = sP_NEWPASSWORD != null ?
                new ObjectParameter("SP_NEWPASSWORD", sP_NEWPASSWORD) :
                new ObjectParameter("SP_NEWPASSWORD", typeof(string));
    
            var sP_OLDPASSWORDParameter = sP_OLDPASSWORD != null ?
                new ObjectParameter("SP_OLDPASSWORD", sP_OLDPASSWORD) :
                new ObjectParameter("SP_OLDPASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CHANGEPASSWORD", sP_USERIDParameter, sP_NEWPASSWORDParameter, sP_OLDPASSWORDParameter, sP_MESSAGE);
        }
    
        public virtual ObjectResult<USP_CheckLoginUserIsVendor_Result> USP_CheckLoginUserIsVendor(Nullable<int> loginID)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CheckLoginUserIsVendor_Result>("USP_CheckLoginUserIsVendor", loginIDParameter);
        }
    
        public virtual ObjectResult<USP_CheckPincodeExists_Result> USP_CheckPincodeExists(string pincode)
        {
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CheckPincodeExists_Result>("USP_CheckPincodeExists", pincodeParameter);
        }
    
        public virtual ObjectResult<USP_CheckValidPO_Result> USP_CheckValidPO(string sP_PONumber)
        {
            var sP_PONumberParameter = sP_PONumber != null ?
                new ObjectParameter("SP_PONumber", sP_PONumber) :
                new ObjectParameter("SP_PONumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CheckValidPO_Result>("USP_CheckValidPO", sP_PONumberParameter);
        }
    
        public virtual int USP_CreateVendorUser(string sP_EMPCode, string sP_EMPNAME, string sP_EMAILID, string sP_LOGINPASSWORD, ObjectParameter sP_RETURNVALUE)
        {
            var sP_EMPCodeParameter = sP_EMPCode != null ?
                new ObjectParameter("SP_EMPCode", sP_EMPCode) :
                new ObjectParameter("SP_EMPCode", typeof(string));
    
            var sP_EMPNAMEParameter = sP_EMPNAME != null ?
                new ObjectParameter("SP_EMPNAME", sP_EMPNAME) :
                new ObjectParameter("SP_EMPNAME", typeof(string));
    
            var sP_EMAILIDParameter = sP_EMAILID != null ?
                new ObjectParameter("SP_EMAILID", sP_EMAILID) :
                new ObjectParameter("SP_EMAILID", typeof(string));
    
            var sP_LOGINPASSWORDParameter = sP_LOGINPASSWORD != null ?
                new ObjectParameter("SP_LOGINPASSWORD", sP_LOGINPASSWORD) :
                new ObjectParameter("SP_LOGINPASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CreateVendorUser", sP_EMPCodeParameter, sP_EMPNAMEParameter, sP_EMAILIDParameter, sP_LOGINPASSWORDParameter, sP_RETURNVALUE);
        }
    
        public virtual ObjectResult<USP_DASHBOARD_DATA_Result> USP_DASHBOARD_DATA(string sP_DataName)
        {
            var sP_DataNameParameter = sP_DataName != null ?
                new ObjectParameter("SP_DataName", sP_DataName) :
                new ObjectParameter("SP_DataName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DASHBOARD_DATA_Result>("USP_DASHBOARD_DATA", sP_DataNameParameter);
        }
    
        public virtual ObjectResult<USP_Dashboard_MailroomOutward_MainData_Result> USP_Dashboard_MailroomOutward_MainData(string plantName)
        {
            var plantNameParameter = plantName != null ?
                new ObjectParameter("PlantName", plantName) :
                new ObjectParameter("PlantName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Dashboard_MailroomOutward_MainData_Result>("USP_Dashboard_MailroomOutward_MainData", plantNameParameter);
        }
    
        public virtual ObjectResult<USP_Get_AP_RejectionData_Result> USP_Get_AP_RejectionData(string sP_RejectionAt)
        {
            var sP_RejectionAtParameter = sP_RejectionAt != null ?
                new ObjectParameter("SP_RejectionAt", sP_RejectionAt) :
                new ObjectParameter("SP_RejectionAt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Get_AP_RejectionData_Result>("USP_Get_AP_RejectionData", sP_RejectionAtParameter);
        }
    
        public virtual ObjectResult<USP_GET_APPendingApproval_Result> USP_GET_APPendingApproval(Nullable<int> sBUID, Nullable<int> branchID, string inwardID, string autoApprStatus, Nullable<int> userID)
        {
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var autoApprStatusParameter = autoApprStatus != null ?
                new ObjectParameter("AutoApprStatus", autoApprStatus) :
                new ObjectParameter("AutoApprStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_APPendingApproval_Result>("USP_GET_APPendingApproval", sBUIDParameter, branchIDParameter, inwardIDParameter, autoApprStatusParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GET_APPendingData_Result> USP_GET_APPendingData(Nullable<int> sBUID, Nullable<int> branchID, string inwardID, string autoApprStatus, Nullable<int> userID)
        {
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var autoApprStatusParameter = autoApprStatus != null ?
                new ObjectParameter("AutoApprStatus", autoApprStatus) :
                new ObjectParameter("AutoApprStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_APPendingData_Result>("USP_GET_APPendingData", sBUIDParameter, branchIDParameter, inwardIDParameter, autoApprStatusParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GET_APPendingList_Result> USP_GET_APPendingList(Nullable<int> sBUID, Nullable<int> branchID, string inwardID, string autoApprStatus, Nullable<int> userID)
        {
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var autoApprStatusParameter = autoApprStatus != null ?
                new ObjectParameter("AutoApprStatus", autoApprStatus) :
                new ObjectParameter("AutoApprStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_APPendingList_Result>("USP_GET_APPendingList", sBUIDParameter, branchIDParameter, inwardIDParameter, autoApprStatusParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GET_ENTITYVALUES_Result> USP_GET_ENTITYVALUES(string sP_PortalID)
        {
            var sP_PortalIDParameter = sP_PortalID != null ?
                new ObjectParameter("SP_PortalID", sP_PortalID) :
                new ObjectParameter("SP_PortalID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_ENTITYVALUES_Result>("USP_GET_ENTITYVALUES", sP_PortalIDParameter);
        }
    
        public virtual ObjectResult<USP_Get_Mailroom_RejectionData_Result> USP_Get_Mailroom_RejectionData(string sP_RejectionAt)
        {
            var sP_RejectionAtParameter = sP_RejectionAt != null ?
                new ObjectParameter("SP_RejectionAt", sP_RejectionAt) :
                new ObjectParameter("SP_RejectionAt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Get_Mailroom_RejectionData_Result>("USP_Get_Mailroom_RejectionData", sP_RejectionAtParameter);
        }
    
        public virtual ObjectResult<USP_GET_PlantVALUES_Result> USP_GET_PlantVALUES(string sP_EntityID)
        {
            var sP_EntityIDParameter = sP_EntityID != null ?
                new ObjectParameter("SP_EntityID", sP_EntityID) :
                new ObjectParameter("SP_EntityID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_PlantVALUES_Result>("USP_GET_PlantVALUES", sP_EntityIDParameter);
        }
    
        public virtual ObjectResult<USP_GET_QUERYDESC_KEYVALUES_Result> USP_GET_QUERYDESC_KEYVALUES(string parent_KyeID)
        {
            var parent_KyeIDParameter = parent_KyeID != null ?
                new ObjectParameter("Parent_KyeID", parent_KyeID) :
                new ObjectParameter("Parent_KyeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_QUERYDESC_KEYVALUES_Result>("USP_GET_QUERYDESC_KEYVALUES", parent_KyeIDParameter);
        }
    
        public virtual ObjectResult<USP_GETALLINVOICETYPE_Category_Result> USP_GETALLINVOICETYPE_Category(string sBU, string categoryType)
        {
            var sBUParameter = sBU != null ?
                new ObjectParameter("SBU", sBU) :
                new ObjectParameter("SBU", typeof(string));
    
            var categoryTypeParameter = categoryType != null ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETALLINVOICETYPE_Category_Result>("USP_GETALLINVOICETYPE_Category", sBUParameter, categoryTypeParameter);
        }
    
        public virtual ObjectResult<USP_GETALLSBU_Result> USP_GETALLSBU()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETALLSBU_Result>("USP_GETALLSBU");
        }
    
        public virtual ObjectResult<USP_GETALLVENDORS_Result> USP_GETALLVENDORS(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETALLVENDORS_Result>("USP_GETALLVENDORS", prefixParameter);
        }
    
        public virtual ObjectResult<USP_GetBranchMaster_Result> USP_GetBranchMaster(Nullable<int> sBUID, Nullable<int> branchId)
        {
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetBranchMaster_Result>("USP_GetBranchMaster", sBUIDParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<USP_GETBRANCHUSERWISE_Result> USP_GETBRANCHUSERWISE(Nullable<decimal> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETBRANCHUSERWISE_Result>("USP_GETBRANCHUSERWISE", userIdParameter);
        }
    
        public virtual ObjectResult<USP_GetCostCentre_Result> USP_GetCostCentre()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetCostCentre_Result>("USP_GetCostCentre");
        }
    
        public virtual ObjectResult<USP_GetCountryMaster_Result> USP_GetCountryMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetCountryMaster_Result>("USP_GetCountryMaster");
        }
    
        public virtual ObjectResult<USP_GetCourierMasterList_Result> USP_GetCourierMasterList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetCourierMasterList_Result>("USP_GetCourierMasterList");
        }
    
        public virtual ObjectResult<USP_GetCurrencyList_Result> USP_GetCurrencyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetCurrencyList_Result>("USP_GetCurrencyList");
        }
    
        public virtual ObjectResult<USP_GetData_VendChangeRequest_Result> USP_GetData_VendChangeRequest(Nullable<int> loginID)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetData_VendChangeRequest_Result>("USP_GetData_VendChangeRequest", loginIDParameter);
        }
    
        public virtual ObjectResult<USP_GetDaywiseInvoiceReport_AllBranch_Result> USP_GetDaywiseInvoiceReport_AllBranch(Nullable<int> month, Nullable<int> year, Nullable<int> sBUID, Nullable<int> locationId)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDaywiseInvoiceReport_AllBranch_Result>("USP_GetDaywiseInvoiceReport_AllBranch", monthParameter, yearParameter, sBUIDParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<USP_GetDepatmentList_Result> USP_GetDepatmentList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDepatmentList_Result>("USP_GetDepatmentList");
        }
    
        public virtual ObjectResult<USP_GetDocumentMasterDetails_Result> USP_GetDocumentMasterDetails(string docMasterKey)
        {
            var docMasterKeyParameter = docMasterKey != null ?
                new ObjectParameter("DocMasterKey", docMasterKey) :
                new ObjectParameter("DocMasterKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDocumentMasterDetails_Result>("USP_GetDocumentMasterDetails", docMasterKeyParameter);
        }
    
        public virtual ObjectResult<USP_GetEmailIDs_SendMail_Result> USP_GetEmailIDs_SendMail(string groupName, Nullable<int> userID)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetEmailIDs_SendMail_Result>("USP_GetEmailIDs_SendMail", groupNameParameter, userIDParameter);
        }
    
        public virtual int USP_GetEntityName(string sP_ShortCode, ObjectParameter sP_EntityName)
        {
            var sP_ShortCodeParameter = sP_ShortCode != null ?
                new ObjectParameter("SP_ShortCode", sP_ShortCode) :
                new ObjectParameter("SP_ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetEntityName", sP_ShortCodeParameter, sP_EntityName);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GETFILEEXIST(string sP_FileName)
        {
            var sP_FileNameParameter = sP_FileName != null ?
                new ObjectParameter("SP_FileName", sP_FileName) :
                new ObjectParameter("SP_FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GETFILEEXIST", sP_FileNameParameter);
        }
    
        public virtual ObjectResult<USP_GETGROUP_MENUUSER_Result> USP_GETGROUP_MENUUSER()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETGROUP_MENUUSER_Result>("USP_GETGROUP_MENUUSER");
        }
    
        public virtual ObjectResult<USP_GetIndex_SearchData_Result> USP_GetIndex_SearchData(string searchName, string searchVal, string fromDate, string toDate, Nullable<int> userID)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var searchValParameter = searchVal != null ?
                new ObjectParameter("SearchVal", searchVal) :
                new ObjectParameter("SearchVal", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetIndex_SearchData_Result>("USP_GetIndex_SearchData", searchNameParameter, searchValParameter, fromDateParameter, toDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GetInternalUsersList_Result> USP_GetInternalUsersList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInternalUsersList_Result>("USP_GetInternalUsersList");
        }
    
        public virtual ObjectResult<USP_GetInvoice_HistoryData_Result> USP_GetInvoice_HistoryData(string inwardID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoice_HistoryData_Result>("USP_GetInvoice_HistoryData", inwardIDParameter);
        }
    
        public virtual ObjectResult<USP_GetInvoice_HistoryData_26_11_21_Result> USP_GetInvoice_HistoryData_26_11_21(string inwardID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoice_HistoryData_26_11_21_Result>("USP_GetInvoice_HistoryData_26_11_21", inwardIDParameter);
        }
    
        public virtual ObjectResult<USP_GetInvoice_HistoryData_Bk1_Result> USP_GetInvoice_HistoryData_Bk1(string inwardID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoice_HistoryData_Bk1_Result>("USP_GetInvoice_HistoryData_Bk1", inwardIDParameter);
        }
    
        public virtual ObjectResult<USP_GetInvoiceApprovalList_AP_Result> USP_GetInvoiceApprovalList_AP(string fromDate, string toDate, string inwardID, Nullable<int> userId)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoiceApprovalList_AP_Result>("USP_GetInvoiceApprovalList_AP", fromDateParameter, toDateParameter, inwardIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<USP_GetInvoiceCheckListMaster_Result> USP_GetInvoiceCheckListMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoiceCheckListMaster_Result>("USP_GetInvoiceCheckListMaster");
        }
    
        public virtual int USP_GETINVOICEDETAILS_AP(string invoiceCode)
        {
            var invoiceCodeParameter = invoiceCode != null ?
                new ObjectParameter("InvoiceCode", invoiceCode) :
                new ObjectParameter("InvoiceCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GETINVOICEDETAILS_AP", invoiceCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetInvoiceHistory_Result> USP_GetInvoiceHistory(string pONo)
        {
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoiceHistory_Result>("USP_GetInvoiceHistory", pONoParameter);
        }
    
        public virtual int USP_GetInvoiceInwardId(string sP_InvoiceNumber, string sP_InvoiceDate, string sP_InvoiceGrossAmount, string sP_SupplierGSTIN, ObjectParameter sP_InwardId)
        {
            var sP_InvoiceNumberParameter = sP_InvoiceNumber != null ?
                new ObjectParameter("SP_InvoiceNumber", sP_InvoiceNumber) :
                new ObjectParameter("SP_InvoiceNumber", typeof(string));
    
            var sP_InvoiceDateParameter = sP_InvoiceDate != null ?
                new ObjectParameter("SP_InvoiceDate", sP_InvoiceDate) :
                new ObjectParameter("SP_InvoiceDate", typeof(string));
    
            var sP_InvoiceGrossAmountParameter = sP_InvoiceGrossAmount != null ?
                new ObjectParameter("SP_InvoiceGrossAmount", sP_InvoiceGrossAmount) :
                new ObjectParameter("SP_InvoiceGrossAmount", typeof(string));
    
            var sP_SupplierGSTINParameter = sP_SupplierGSTIN != null ?
                new ObjectParameter("SP_SupplierGSTIN", sP_SupplierGSTIN) :
                new ObjectParameter("SP_SupplierGSTIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetInvoiceInwardId", sP_InvoiceNumberParameter, sP_InvoiceDateParameter, sP_InvoiceGrossAmountParameter, sP_SupplierGSTINParameter, sP_InwardId);
        }
    
        public virtual ObjectResult<USP_GetInvoiceItemDetails_HistoryData_Result> USP_GetInvoiceItemDetails_HistoryData(string inwardID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoiceItemDetails_HistoryData_Result>("USP_GetInvoiceItemDetails_HistoryData", inwardIDParameter);
        }
    
        public virtual ObjectResult<string> USP_GetInvoicePath(string inwardID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetInvoicePath", inwardIDParameter);
        }
    
        public virtual ObjectResult<string> USP_GetInwardList_ByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetInwardList_ByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<USP_GetItemwiseDetails_Result> USP_GetItemwiseDetails(Nullable<int> sBUID, Nullable<int> branchID, string inwardID, Nullable<int> invoicetypeid)
        {
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var invoicetypeidParameter = invoicetypeid.HasValue ?
                new ObjectParameter("invoicetypeid", invoicetypeid) :
                new ObjectParameter("invoicetypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetItemwiseDetails_Result>("USP_GetItemwiseDetails", sBUIDParameter, branchIDParameter, inwardIDParameter, invoicetypeidParameter);
        }
    
        public virtual ObjectResult<USP_GETKEYVALUES_Result> USP_GETKEYVALUES(string sP_KeyType, string parent_KyeID)
        {
            var sP_KeyTypeParameter = sP_KeyType != null ?
                new ObjectParameter("SP_KeyType", sP_KeyType) :
                new ObjectParameter("SP_KeyType", typeof(string));
    
            var parent_KyeIDParameter = parent_KyeID != null ?
                new ObjectParameter("Parent_KyeID", parent_KyeID) :
                new ObjectParameter("Parent_KyeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETKEYVALUES_Result>("USP_GETKEYVALUES", sP_KeyTypeParameter, parent_KyeIDParameter);
        }
    
        public virtual ObjectResult<USP_GETLOCATIONBRANCHWISE_Result> USP_GETLOCATIONBRANCHWISE(Nullable<decimal> sBUID)
        {
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETLOCATIONBRANCHWISE_Result>("USP_GETLOCATIONBRANCHWISE", sBUIDParameter);
        }
    
        public virtual ObjectResult<USP_GetMailroomIndexPendList_Result> USP_GetMailroomIndexPendList(string fromDate, string toDate, string inwardID, string vendorName)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMailroomIndexPendList_Result>("USP_GetMailroomIndexPendList", fromDateParameter, toDateParameter, inwardIDParameter, vendorNameParameter);
        }
    
        public virtual int USP_GetMailroomInvoiceRejectedStatus(string sP_InwardId, ObjectParameter sP_STATUS)
        {
            var sP_InwardIdParameter = sP_InwardId != null ?
                new ObjectParameter("SP_InwardId", sP_InwardId) :
                new ObjectParameter("SP_InwardId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetMailroomInvoiceRejectedStatus", sP_InwardIdParameter, sP_STATUS);
        }
    
        public virtual ObjectResult<USP_GetMailroomQCPendList_Result> USP_GetMailroomQCPendList(string fromDate, string toDate, string inwardID, string vendorName)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMailroomQCPendList_Result>("USP_GetMailroomQCPendList", fromDateParameter, toDateParameter, inwardIDParameter, vendorNameParameter);
        }
    
        public virtual ObjectResult<string> USP_GetMailroomRejectionDetails(string inwardID, Nullable<int> userID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetMailroomRejectionDetails", inwardIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GetMailroomRejectionList_Result> USP_GetMailroomRejectionList(string fromDate, string toDate, string inwardID, Nullable<int> rejectionID)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var rejectionIDParameter = rejectionID.HasValue ?
                new ObjectParameter("RejectionID", rejectionID) :
                new ObjectParameter("RejectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMailroomRejectionList_Result>("USP_GetMailroomRejectionList", fromDateParameter, toDateParameter, inwardIDParameter, rejectionIDParameter);
        }
    
        public virtual ObjectResult<USP_GetMailRoomTracking_SearchData_Result> USP_GetMailRoomTracking_SearchData(string fromDate, string toDate, string inwardId, string invoiceNumber, string pONumber, string vendorCode, string vendorGST, string vendorName)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var inwardIdParameter = inwardId != null ?
                new ObjectParameter("InwardId", inwardId) :
                new ObjectParameter("InwardId", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var vendorGSTParameter = vendorGST != null ?
                new ObjectParameter("VendorGST", vendorGST) :
                new ObjectParameter("VendorGST", typeof(string));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMailRoomTracking_SearchData_Result>("USP_GetMailRoomTracking_SearchData", fromDateParameter, toDateParameter, inwardIdParameter, invoiceNumberParameter, pONumberParameter, vendorCodeParameter, vendorGSTParameter, vendorNameParameter);
        }
    
        public virtual int USP_GetMailRoomTracking_SearchData_BK1(string fromDate, string toDate, string inwardId, string pONumber, string vendorCode, string invoiceNumber)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var inwardIdParameter = inwardId != null ?
                new ObjectParameter("InwardId", inwardId) :
                new ObjectParameter("InwardId", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetMailRoomTracking_SearchData_BK1", fromDateParameter, toDateParameter, inwardIdParameter, pONumberParameter, vendorCodeParameter, invoiceNumberParameter);
        }
    
        public virtual ObjectResult<string> USP_GETMENURIGHTS(string empCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GETMENURIGHTS", empCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetOCRInvoiceItemData_Result> USP_GetOCRInvoiceItemData(string inwardID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetOCRInvoiceItemData_Result>("USP_GetOCRInvoiceItemData", inwardIDParameter);
        }
    
        public virtual ObjectResult<USP_GetOrgTypeDocMaster_Result> USP_GetOrgTypeDocMaster(string oRg_TypeKey)
        {
            var oRg_TypeKeyParameter = oRg_TypeKey != null ?
                new ObjectParameter("ORg_TypeKey", oRg_TypeKey) :
                new ObjectParameter("ORg_TypeKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetOrgTypeDocMaster_Result>("USP_GetOrgTypeDocMaster", oRg_TypeKeyParameter);
        }
    
        public virtual ObjectResult<USP_GetOutwardConsolidateData_Result> USP_GetOutwardConsolidateData(string fromDate, string toDate)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetOutwardConsolidateData_Result>("USP_GetOutwardConsolidateData", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<USP_GetpdfList_Result> USP_GetpdfList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetpdfList_Result>("USP_GetpdfList");
        }
    
        public virtual ObjectResult<USP_GetPlanEntityData_Result> USP_GetPlanEntityData(Nullable<int> portalID, Nullable<int> entityID, Nullable<int> plantID)
        {
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPlanEntityData_Result>("USP_GetPlanEntityData", portalIDParameter, entityIDParameter, plantIDParameter);
        }
    
        public virtual ObjectResult<USP_GetPODetails_Result> USP_GetPODetails(string pONo)
        {
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPODetails_Result>("USP_GetPODetails", pONoParameter);
        }
    
        public virtual ObjectResult<USP_GetPOGRNDetails_Result> USP_GetPOGRNDetails(string pONo)
        {
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPOGRNDetails_Result>("USP_GetPOGRNDetails", pONoParameter);
        }
    
        public virtual ObjectResult<USP_GetPOListVendorWise_InvUpload_Result> USP_GetPOListVendorWise_InvUpload(Nullable<int> vendorID, string pONo)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPOListVendorWise_InvUpload_Result>("USP_GetPOListVendorWise_InvUpload", vendorIDParameter, pONoParameter);
        }
    
        public virtual ObjectResult<USP_GetRejectedInvoiceList_AP_Result> USP_GetRejectedInvoiceList_AP(string inwardID, Nullable<int> rejectedID, string vendorName)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var rejectedIDParameter = rejectedID.HasValue ?
                new ObjectParameter("RejectedID", rejectedID) :
                new ObjectParameter("RejectedID", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRejectedInvoiceList_AP_Result>("USP_GetRejectedInvoiceList_AP", inwardIDParameter, rejectedIDParameter, vendorNameParameter);
        }
    
        public virtual ObjectResult<USP_GetRejectionMatrixList_Result> USP_GetRejectionMatrixList(string supplierGSTNo, string plantName, string deptName, string pOType, string isNCType)
        {
            var supplierGSTNoParameter = supplierGSTNo != null ?
                new ObjectParameter("SupplierGSTNo", supplierGSTNo) :
                new ObjectParameter("SupplierGSTNo", typeof(string));
    
            var plantNameParameter = plantName != null ?
                new ObjectParameter("PlantName", plantName) :
                new ObjectParameter("PlantName", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var pOTypeParameter = pOType != null ?
                new ObjectParameter("POType", pOType) :
                new ObjectParameter("POType", typeof(string));
    
            var isNCTypeParameter = isNCType != null ?
                new ObjectParameter("IsNCType", isNCType) :
                new ObjectParameter("IsNCType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRejectionMatrixList_Result>("USP_GetRejectionMatrixList", supplierGSTNoParameter, plantNameParameter, deptNameParameter, pOTypeParameter, isNCTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetRejectionMatrixList_211021_Result> USP_GetRejectionMatrixList_211021(string supplierGSTNo, string plantName, string deptName, string pOType, string isNCType)
        {
            var supplierGSTNoParameter = supplierGSTNo != null ?
                new ObjectParameter("SupplierGSTNo", supplierGSTNo) :
                new ObjectParameter("SupplierGSTNo", typeof(string));
    
            var plantNameParameter = plantName != null ?
                new ObjectParameter("PlantName", plantName) :
                new ObjectParameter("PlantName", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var pOTypeParameter = pOType != null ?
                new ObjectParameter("POType", pOType) :
                new ObjectParameter("POType", typeof(string));
    
            var isNCTypeParameter = isNCType != null ?
                new ObjectParameter("IsNCType", isNCType) :
                new ObjectParameter("IsNCType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRejectionMatrixList_211021_Result>("USP_GetRejectionMatrixList_211021", supplierGSTNoParameter, plantNameParameter, deptNameParameter, pOTypeParameter, isNCTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetReportData_AP_Result> USP_GetReportData_AP(string reportType)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetReportData_AP_Result>("USP_GetReportData_AP", reportTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetReportData_MP_Result> USP_GetReportData_MP(string reportType)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetReportData_MP_Result>("USP_GetReportData_MP", reportTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetReportData_VP_Result> USP_GetReportData_VP(string reportType, Nullable<int> userID)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetReportData_VP_Result>("USP_GetReportData_VP", reportTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GetReportData_VP_021121_Result> USP_GetReportData_VP_021121(string reportType, Nullable<int> userID)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetReportData_VP_021121_Result>("USP_GetReportData_VP_021121", reportTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GetReportMasterList_AP_Result> USP_GetReportMasterList_AP(string userType)
        {
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetReportMasterList_AP_Result>("USP_GetReportMasterList_AP", userTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetReportMasterList_MP_Result> USP_GetReportMasterList_MP(string userType)
        {
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetReportMasterList_MP_Result>("USP_GetReportMasterList_MP", userTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetReportMasterList_VP_Result> USP_GetReportMasterList_VP(string userType)
        {
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetReportMasterList_VP_Result>("USP_GetReportMasterList_VP", userTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetSBUTypeBySBUID_Result> USP_GetSBUTypeBySBUID(Nullable<int> sBUID)
        {
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSBUTypeBySBUID_Result>("USP_GetSBUTypeBySBUID", sBUIDParameter);
        }
    
        public virtual int USP_GETSBUUSERWISE(Nullable<decimal> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GETSBUUSERWISE", userIdParameter);
        }
    
        public virtual int USP_GetStateName(Nullable<int> sP_StateCode, ObjectParameter sP_StateName)
        {
            var sP_StateCodeParameter = sP_StateCode.HasValue ?
                new ObjectParameter("SP_StateCode", sP_StateCode) :
                new ObjectParameter("SP_StateCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetStateName", sP_StateCodeParameter, sP_StateName);
        }
    
        public virtual ObjectResult<USP_GetSupplierName_Result> USP_GetSupplierName(string supplierGSTIN)
        {
            var supplierGSTINParameter = supplierGSTIN != null ?
                new ObjectParameter("SupplierGSTIN", supplierGSTIN) :
                new ObjectParameter("SupplierGSTIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSupplierName_Result>("USP_GetSupplierName", supplierGSTINParameter);
        }
    
        public virtual ObjectResult<USP_GETSUPPORTINGDOC_Result> USP_GETSUPPORTINGDOC(Nullable<decimal> invoiceTypeID)
        {
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETSUPPORTINGDOC_Result>("USP_GETSUPPORTINGDOC", invoiceTypeIDParameter);
        }
    
        public virtual ObjectResult<USP_GetTDSRateData_Result> USP_GetTDSRateData(string hSNCode)
        {
            var hSNCodeParameter = hSNCode != null ?
                new ObjectParameter("HSNCode", hSNCode) :
                new ObjectParameter("HSNCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetTDSRateData_Result>("USP_GetTDSRateData", hSNCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetTDSSectionList_Result> USP_GetTDSSectionList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetTDSSectionList_Result>("USP_GetTDSSectionList");
        }
    
        public virtual ObjectResult<USP_GetTDSSubSectionList_Result> USP_GetTDSSubSectionList(Nullable<int> tDSSecID)
        {
            var tDSSecIDParameter = tDSSecID.HasValue ?
                new ObjectParameter("TDSSecID", tDSSecID) :
                new ObjectParameter("TDSSecID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetTDSSubSectionList_Result>("USP_GetTDSSubSectionList", tDSSecIDParameter);
        }
    
        public virtual ObjectResult<USP_GetUploadDocList_VendReg_Result> USP_GetUploadDocList_VendReg(string parent_KyeID)
        {
            var parent_KyeIDParameter = parent_KyeID != null ?
                new ObjectParameter("Parent_KyeID", parent_KyeID) :
                new ObjectParameter("Parent_KyeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUploadDocList_VendReg_Result>("USP_GetUploadDocList_VendReg", parent_KyeIDParameter);
        }
    
        public virtual int USP_GetUserDetails(string empCode, string empName)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetUserDetails", empCodeParameter, empNameParameter);
        }
    
        public virtual ObjectResult<USP_GETUSERGROUPDETAILS_New_Result> USP_GETUSERGROUPDETAILS_New(string gROUPID)
        {
            var gROUPIDParameter = gROUPID != null ?
                new ObjectParameter("GROUPID", gROUPID) :
                new ObjectParameter("GROUPID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GETUSERGROUPDETAILS_New_Result>("USP_GETUSERGROUPDETAILS_New", gROUPIDParameter);
        }
    
        public virtual ObjectResult<USP_GetUserProductivityRpt_MP_Result> USP_GetUserProductivityRpt_MP(string fromDt, string toDt, Nullable<int> userID)
        {
            var fromDtParameter = fromDt != null ?
                new ObjectParameter("FromDt", fromDt) :
                new ObjectParameter("FromDt", typeof(string));
    
            var toDtParameter = toDt != null ?
                new ObjectParameter("ToDt", toDt) :
                new ObjectParameter("ToDt", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUserProductivityRpt_MP_Result>("USP_GetUserProductivityRpt_MP", fromDtParameter, toDtParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GetUsers_MailroomOutwardHandOver_Result> USP_GetUsers_MailroomOutwardHandOver()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUsers_MailroomOutwardHandOver_Result>("USP_GetUsers_MailroomOutwardHandOver");
        }
    
        public virtual ObjectResult<USP_GetVendInvoiceData_InwardList_Result> USP_GetVendInvoiceData_InwardList(string fromDate, string toDate, string inwardID, Nullable<int> vendorID)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetVendInvoiceData_InwardList_Result>("USP_GetVendInvoiceData_InwardList", fromDateParameter, toDateParameter, inwardIDParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<USP_GetVendorDetails_Result> USP_GetVendorDetails(Nullable<int> sP_RegId)
        {
            var sP_RegIdParameter = sP_RegId.HasValue ?
                new ObjectParameter("SP_RegId", sP_RegId) :
                new ObjectParameter("SP_RegId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetVendorDetails_Result>("USP_GetVendorDetails", sP_RegIdParameter);
        }
    
        public virtual ObjectResult<USP_GetVendorDocument_Result> USP_GetVendorDocument(Nullable<int> sP_DocId)
        {
            var sP_DocIdParameter = sP_DocId.HasValue ?
                new ObjectParameter("SP_DocId", sP_DocId) :
                new ObjectParameter("SP_DocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetVendorDocument_Result>("USP_GetVendorDocument", sP_DocIdParameter);
        }
    
        public virtual ObjectResult<USP_GetVendorInvoiceData_Result> USP_GetVendorInvoiceData(string fromDate, string toDate, string invoiceNo, Nullable<int> vendorID, Nullable<int> reportType)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var reportTypeParameter = reportType.HasValue ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetVendorInvoiceData_Result>("USP_GetVendorInvoiceData", fromDateParameter, toDateParameter, invoiceNoParameter, vendorIDParameter, reportTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetVendorpdfList_Result> USP_GetVendorpdfList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetVendorpdfList_Result>("USP_GetVendorpdfList");
        }
    
        public virtual ObjectResult<USP_GetVendorRegistrationList_Result> USP_GetVendorRegistrationList(string sP_Tag)
        {
            var sP_TagParameter = sP_Tag != null ?
                new ObjectParameter("SP_Tag", sP_Tag) :
                new ObjectParameter("SP_Tag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetVendorRegistrationList_Result>("USP_GetVendorRegistrationList", sP_TagParameter);
        }
    
        public virtual ObjectResult<USP_GetVendPortalRejectionList_Result> USP_GetVendPortalRejectionList(string fromDate, string toDate, string inwardID, string rejectionType, Nullable<int> userID)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var rejectionTypeParameter = rejectionType != null ?
                new ObjectParameter("RejectionType", rejectionType) :
                new ObjectParameter("RejectionType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetVendPortalRejectionList_Result>("USP_GetVendPortalRejectionList", fromDateParameter, toDateParameter, inwardIDParameter, rejectionTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<USP_GetVendRegis_UploadD_Result> USP_GetVendRegis_UploadD(Nullable<int> loginID)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetVendRegis_UploadD_Result>("USP_GetVendRegis_UploadD", loginIDParameter);
        }
    
        public virtual ObjectResult<USP_GetWIMSRejectedDetails_Result> USP_GetWIMSRejectedDetails(string inwardID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetWIMSRejectedDetails_Result>("USP_GetWIMSRejectedDetails", inwardIDParameter);
        }
    
        public virtual int USP_INSERT_FILEPATH(string fileName, string filePath, string sP_InvoiceNumber, string sP_InvoiceDate, string sP_SupplierGSTIN, string sP_InvoiceNetAmount, string sP_PurchaserGSTIN, string sP_PONo, string sP_IRNNo, string sP_HSNCode)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var sP_InvoiceNumberParameter = sP_InvoiceNumber != null ?
                new ObjectParameter("SP_InvoiceNumber", sP_InvoiceNumber) :
                new ObjectParameter("SP_InvoiceNumber", typeof(string));
    
            var sP_InvoiceDateParameter = sP_InvoiceDate != null ?
                new ObjectParameter("SP_InvoiceDate", sP_InvoiceDate) :
                new ObjectParameter("SP_InvoiceDate", typeof(string));
    
            var sP_SupplierGSTINParameter = sP_SupplierGSTIN != null ?
                new ObjectParameter("SP_SupplierGSTIN", sP_SupplierGSTIN) :
                new ObjectParameter("SP_SupplierGSTIN", typeof(string));
    
            var sP_InvoiceNetAmountParameter = sP_InvoiceNetAmount != null ?
                new ObjectParameter("SP_InvoiceNetAmount", sP_InvoiceNetAmount) :
                new ObjectParameter("SP_InvoiceNetAmount", typeof(string));
    
            var sP_PurchaserGSTINParameter = sP_PurchaserGSTIN != null ?
                new ObjectParameter("SP_PurchaserGSTIN", sP_PurchaserGSTIN) :
                new ObjectParameter("SP_PurchaserGSTIN", typeof(string));
    
            var sP_PONoParameter = sP_PONo != null ?
                new ObjectParameter("SP_PONo", sP_PONo) :
                new ObjectParameter("SP_PONo", typeof(string));
    
            var sP_IRNNoParameter = sP_IRNNo != null ?
                new ObjectParameter("SP_IRNNo", sP_IRNNo) :
                new ObjectParameter("SP_IRNNo", typeof(string));
    
            var sP_HSNCodeParameter = sP_HSNCode != null ?
                new ObjectParameter("SP_HSNCode", sP_HSNCode) :
                new ObjectParameter("SP_HSNCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_INSERT_FILEPATH", fileNameParameter, filePathParameter, sP_InvoiceNumberParameter, sP_InvoiceDateParameter, sP_SupplierGSTINParameter, sP_InvoiceNetAmountParameter, sP_PurchaserGSTINParameter, sP_PONoParameter, sP_IRNNoParameter, sP_HSNCodeParameter);
        }
    
        public virtual int USP_INSERT_FILEPATH_17_11_21(string fileName, string filePath, string sP_InvoiceNumber, string sP_InvoiceDate, string sP_SupplierGSTIN, string sP_InvoiceNetAmount, string sP_PurchaserGSTIN, string sP_PONo)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var sP_InvoiceNumberParameter = sP_InvoiceNumber != null ?
                new ObjectParameter("SP_InvoiceNumber", sP_InvoiceNumber) :
                new ObjectParameter("SP_InvoiceNumber", typeof(string));
    
            var sP_InvoiceDateParameter = sP_InvoiceDate != null ?
                new ObjectParameter("SP_InvoiceDate", sP_InvoiceDate) :
                new ObjectParameter("SP_InvoiceDate", typeof(string));
    
            var sP_SupplierGSTINParameter = sP_SupplierGSTIN != null ?
                new ObjectParameter("SP_SupplierGSTIN", sP_SupplierGSTIN) :
                new ObjectParameter("SP_SupplierGSTIN", typeof(string));
    
            var sP_InvoiceNetAmountParameter = sP_InvoiceNetAmount != null ?
                new ObjectParameter("SP_InvoiceNetAmount", sP_InvoiceNetAmount) :
                new ObjectParameter("SP_InvoiceNetAmount", typeof(string));
    
            var sP_PurchaserGSTINParameter = sP_PurchaserGSTIN != null ?
                new ObjectParameter("SP_PurchaserGSTIN", sP_PurchaserGSTIN) :
                new ObjectParameter("SP_PurchaserGSTIN", typeof(string));
    
            var sP_PONoParameter = sP_PONo != null ?
                new ObjectParameter("SP_PONo", sP_PONo) :
                new ObjectParameter("SP_PONo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_INSERT_FILEPATH_17_11_21", fileNameParameter, filePathParameter, sP_InvoiceNumberParameter, sP_InvoiceDateParameter, sP_SupplierGSTINParameter, sP_InvoiceNetAmountParameter, sP_PurchaserGSTINParameter, sP_PONoParameter);
        }
    
        public virtual int USP_INSERTAPPROVALDATA(string invoiceCode, string empCode, Nullable<decimal> functionId, Nullable<decimal> level, string approvalSentDate, string mailStatus, string remark)
        {
            var invoiceCodeParameter = invoiceCode != null ?
                new ObjectParameter("InvoiceCode", invoiceCode) :
                new ObjectParameter("InvoiceCode", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("functionId", functionId) :
                new ObjectParameter("functionId", typeof(decimal));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(decimal));
    
            var approvalSentDateParameter = approvalSentDate != null ?
                new ObjectParameter("ApprovalSentDate", approvalSentDate) :
                new ObjectParameter("ApprovalSentDate", typeof(string));
    
            var mailStatusParameter = mailStatus != null ?
                new ObjectParameter("MailStatus", mailStatus) :
                new ObjectParameter("MailStatus", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_INSERTAPPROVALDATA", invoiceCodeParameter, empCodeParameter, functionIdParameter, levelParameter, approvalSentDateParameter, mailStatusParameter, remarkParameter);
        }
    
        public virtual int USP_INSERTAPPROVALDATA_LEVEL(string invoiceCode, string empCode, Nullable<decimal> functionId, Nullable<decimal> level, string approvalSentDate, string mailStatus, string remark)
        {
            var invoiceCodeParameter = invoiceCode != null ?
                new ObjectParameter("InvoiceCode", invoiceCode) :
                new ObjectParameter("InvoiceCode", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("functionId", functionId) :
                new ObjectParameter("functionId", typeof(decimal));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(decimal));
    
            var approvalSentDateParameter = approvalSentDate != null ?
                new ObjectParameter("ApprovalSentDate", approvalSentDate) :
                new ObjectParameter("ApprovalSentDate", typeof(string));
    
            var mailStatusParameter = mailStatus != null ?
                new ObjectParameter("MailStatus", mailStatus) :
                new ObjectParameter("MailStatus", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_INSERTAPPROVALDATA_LEVEL", invoiceCodeParameter, empCodeParameter, functionIdParameter, levelParameter, approvalSentDateParameter, mailStatusParameter, remarkParameter);
        }
    
        public virtual ObjectResult<string> USP_INSERTCOURIERINWARD(string barcodeNo, string inwardCode, string supportdoclst, string invoiceDate, Nullable<decimal> locationID, string courierName, Nullable<decimal> invoiceTypeId, string aWBNumber, string comments, Nullable<decimal> numofDocRec, string invoiceNum, string sBU, string businessSegment, Nullable<decimal> vendorId, string invoiceBranchCode, Nullable<decimal> inwardUserId, Nullable<decimal> invoiceNetAmount, Nullable<decimal> invoServiceTaxAmt, string aOPType, string aOPRemark, string status, string addSuppDoc1, string addSuppDoc2, string frmMonth, string toMonth, string startTime, string actCourDate, string apprBranchMgr, string apprBranchAdm, string apprBranchHR, string apprBranchOpr, string apprBranchFin, string apprBranchIT, Nullable<decimal> serTaxPer, Nullable<decimal> serTaxAmt, Nullable<decimal> kKCTaxPer, Nullable<decimal> kKCTaxAmt, Nullable<decimal> sBTaxPer, Nullable<decimal> sBTaxAmt, Nullable<int> isHold, Nullable<int> isReject, Nullable<decimal> totalAmt, Nullable<decimal> gSTTotal, Nullable<decimal> grossTotal, Nullable<decimal> rCMTotal, string voucherType, string apprFinanceHead, string tDSRate, string tDSCode, string tDSAmount, Nullable<int> tDSSectionID, string functions, Nullable<int> deptID, string priority, string iRNNo)
        {
            var barcodeNoParameter = barcodeNo != null ?
                new ObjectParameter("BarcodeNo", barcodeNo) :
                new ObjectParameter("BarcodeNo", typeof(string));
    
            var inwardCodeParameter = inwardCode != null ?
                new ObjectParameter("InwardCode", inwardCode) :
                new ObjectParameter("InwardCode", typeof(string));
    
            var supportdoclstParameter = supportdoclst != null ?
                new ObjectParameter("supportdoclst", supportdoclst) :
                new ObjectParameter("supportdoclst", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(decimal));
    
            var courierNameParameter = courierName != null ?
                new ObjectParameter("CourierName", courierName) :
                new ObjectParameter("CourierName", typeof(string));
    
            var invoiceTypeIdParameter = invoiceTypeId.HasValue ?
                new ObjectParameter("InvoiceTypeId", invoiceTypeId) :
                new ObjectParameter("InvoiceTypeId", typeof(decimal));
    
            var aWBNumberParameter = aWBNumber != null ?
                new ObjectParameter("AWBNumber", aWBNumber) :
                new ObjectParameter("AWBNumber", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var numofDocRecParameter = numofDocRec.HasValue ?
                new ObjectParameter("NumofDocRec", numofDocRec) :
                new ObjectParameter("NumofDocRec", typeof(decimal));
    
            var invoiceNumParameter = invoiceNum != null ?
                new ObjectParameter("InvoiceNum", invoiceNum) :
                new ObjectParameter("InvoiceNum", typeof(string));
    
            var sBUParameter = sBU != null ?
                new ObjectParameter("SBU", sBU) :
                new ObjectParameter("SBU", typeof(string));
    
            var businessSegmentParameter = businessSegment != null ?
                new ObjectParameter("BusinessSegment", businessSegment) :
                new ObjectParameter("BusinessSegment", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(decimal));
    
            var invoiceBranchCodeParameter = invoiceBranchCode != null ?
                new ObjectParameter("InvoiceBranchCode", invoiceBranchCode) :
                new ObjectParameter("InvoiceBranchCode", typeof(string));
    
            var inwardUserIdParameter = inwardUserId.HasValue ?
                new ObjectParameter("InwardUserId", inwardUserId) :
                new ObjectParameter("InwardUserId", typeof(decimal));
    
            var invoiceNetAmountParameter = invoiceNetAmount.HasValue ?
                new ObjectParameter("InvoiceNetAmount", invoiceNetAmount) :
                new ObjectParameter("InvoiceNetAmount", typeof(decimal));
    
            var invoServiceTaxAmtParameter = invoServiceTaxAmt.HasValue ?
                new ObjectParameter("InvoServiceTaxAmt", invoServiceTaxAmt) :
                new ObjectParameter("InvoServiceTaxAmt", typeof(decimal));
    
            var aOPTypeParameter = aOPType != null ?
                new ObjectParameter("AOPType", aOPType) :
                new ObjectParameter("AOPType", typeof(string));
    
            var aOPRemarkParameter = aOPRemark != null ?
                new ObjectParameter("AOPRemark", aOPRemark) :
                new ObjectParameter("AOPRemark", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var addSuppDoc1Parameter = addSuppDoc1 != null ?
                new ObjectParameter("AddSuppDoc1", addSuppDoc1) :
                new ObjectParameter("AddSuppDoc1", typeof(string));
    
            var addSuppDoc2Parameter = addSuppDoc2 != null ?
                new ObjectParameter("AddSuppDoc2", addSuppDoc2) :
                new ObjectParameter("AddSuppDoc2", typeof(string));
    
            var frmMonthParameter = frmMonth != null ?
                new ObjectParameter("FrmMonth", frmMonth) :
                new ObjectParameter("FrmMonth", typeof(string));
    
            var toMonthParameter = toMonth != null ?
                new ObjectParameter("ToMonth", toMonth) :
                new ObjectParameter("ToMonth", typeof(string));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var actCourDateParameter = actCourDate != null ?
                new ObjectParameter("ActCourDate", actCourDate) :
                new ObjectParameter("ActCourDate", typeof(string));
    
            var apprBranchMgrParameter = apprBranchMgr != null ?
                new ObjectParameter("ApprBranchMgr", apprBranchMgr) :
                new ObjectParameter("ApprBranchMgr", typeof(string));
    
            var apprBranchAdmParameter = apprBranchAdm != null ?
                new ObjectParameter("ApprBranchAdm", apprBranchAdm) :
                new ObjectParameter("ApprBranchAdm", typeof(string));
    
            var apprBranchHRParameter = apprBranchHR != null ?
                new ObjectParameter("ApprBranchHR", apprBranchHR) :
                new ObjectParameter("ApprBranchHR", typeof(string));
    
            var apprBranchOprParameter = apprBranchOpr != null ?
                new ObjectParameter("ApprBranchOpr", apprBranchOpr) :
                new ObjectParameter("ApprBranchOpr", typeof(string));
    
            var apprBranchFinParameter = apprBranchFin != null ?
                new ObjectParameter("ApprBranchFin", apprBranchFin) :
                new ObjectParameter("ApprBranchFin", typeof(string));
    
            var apprBranchITParameter = apprBranchIT != null ?
                new ObjectParameter("ApprBranchIT", apprBranchIT) :
                new ObjectParameter("ApprBranchIT", typeof(string));
    
            var serTaxPerParameter = serTaxPer.HasValue ?
                new ObjectParameter("SerTaxPer", serTaxPer) :
                new ObjectParameter("SerTaxPer", typeof(decimal));
    
            var serTaxAmtParameter = serTaxAmt.HasValue ?
                new ObjectParameter("SerTaxAmt", serTaxAmt) :
                new ObjectParameter("SerTaxAmt", typeof(decimal));
    
            var kKCTaxPerParameter = kKCTaxPer.HasValue ?
                new ObjectParameter("KKCTaxPer", kKCTaxPer) :
                new ObjectParameter("KKCTaxPer", typeof(decimal));
    
            var kKCTaxAmtParameter = kKCTaxAmt.HasValue ?
                new ObjectParameter("KKCTaxAmt", kKCTaxAmt) :
                new ObjectParameter("KKCTaxAmt", typeof(decimal));
    
            var sBTaxPerParameter = sBTaxPer.HasValue ?
                new ObjectParameter("SBTaxPer", sBTaxPer) :
                new ObjectParameter("SBTaxPer", typeof(decimal));
    
            var sBTaxAmtParameter = sBTaxAmt.HasValue ?
                new ObjectParameter("SBTaxAmt", sBTaxAmt) :
                new ObjectParameter("SBTaxAmt", typeof(decimal));
    
            var isHoldParameter = isHold.HasValue ?
                new ObjectParameter("IsHold", isHold) :
                new ObjectParameter("IsHold", typeof(int));
    
            var isRejectParameter = isReject.HasValue ?
                new ObjectParameter("IsReject", isReject) :
                new ObjectParameter("IsReject", typeof(int));
    
            var totalAmtParameter = totalAmt.HasValue ?
                new ObjectParameter("TotalAmt", totalAmt) :
                new ObjectParameter("TotalAmt", typeof(decimal));
    
            var gSTTotalParameter = gSTTotal.HasValue ?
                new ObjectParameter("GSTTotal", gSTTotal) :
                new ObjectParameter("GSTTotal", typeof(decimal));
    
            var grossTotalParameter = grossTotal.HasValue ?
                new ObjectParameter("GrossTotal", grossTotal) :
                new ObjectParameter("GrossTotal", typeof(decimal));
    
            var rCMTotalParameter = rCMTotal.HasValue ?
                new ObjectParameter("RCMTotal", rCMTotal) :
                new ObjectParameter("RCMTotal", typeof(decimal));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var apprFinanceHeadParameter = apprFinanceHead != null ?
                new ObjectParameter("ApprFinanceHead", apprFinanceHead) :
                new ObjectParameter("ApprFinanceHead", typeof(string));
    
            var tDSRateParameter = tDSRate != null ?
                new ObjectParameter("TDSRate", tDSRate) :
                new ObjectParameter("TDSRate", typeof(string));
    
            var tDSCodeParameter = tDSCode != null ?
                new ObjectParameter("TDSCode", tDSCode) :
                new ObjectParameter("TDSCode", typeof(string));
    
            var tDSAmountParameter = tDSAmount != null ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(string));
    
            var tDSSectionIDParameter = tDSSectionID.HasValue ?
                new ObjectParameter("TDSSectionID", tDSSectionID) :
                new ObjectParameter("TDSSectionID", typeof(int));
    
            var functionsParameter = functions != null ?
                new ObjectParameter("Functions", functions) :
                new ObjectParameter("Functions", typeof(string));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var iRNNoParameter = iRNNo != null ?
                new ObjectParameter("IRNNo", iRNNo) :
                new ObjectParameter("IRNNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_INSERTCOURIERINWARD", barcodeNoParameter, inwardCodeParameter, supportdoclstParameter, invoiceDateParameter, locationIDParameter, courierNameParameter, invoiceTypeIdParameter, aWBNumberParameter, commentsParameter, numofDocRecParameter, invoiceNumParameter, sBUParameter, businessSegmentParameter, vendorIdParameter, invoiceBranchCodeParameter, inwardUserIdParameter, invoiceNetAmountParameter, invoServiceTaxAmtParameter, aOPTypeParameter, aOPRemarkParameter, statusParameter, addSuppDoc1Parameter, addSuppDoc2Parameter, frmMonthParameter, toMonthParameter, startTimeParameter, actCourDateParameter, apprBranchMgrParameter, apprBranchAdmParameter, apprBranchHRParameter, apprBranchOprParameter, apprBranchFinParameter, apprBranchITParameter, serTaxPerParameter, serTaxAmtParameter, kKCTaxPerParameter, kKCTaxAmtParameter, sBTaxPerParameter, sBTaxAmtParameter, isHoldParameter, isRejectParameter, totalAmtParameter, gSTTotalParameter, grossTotalParameter, rCMTotalParameter, voucherTypeParameter, apprFinanceHeadParameter, tDSRateParameter, tDSCodeParameter, tDSAmountParameter, tDSSectionIDParameter, functionsParameter, deptIDParameter, priorityParameter, iRNNoParameter);
        }
    
        public virtual int USP_InsertInvoiceIndex_Mailroom(string inwardID, string pONo, string invoiceNo, string invoiceDate, Nullable<decimal> invoiceNetAmt, Nullable<decimal> serviceAmt, Nullable<decimal> vendorID, Nullable<decimal> sBUID, Nullable<int> sBUTypeId, string function, Nullable<decimal> branchID, string invBranchcode, string fromMonth, string toMonth, string description, string invoiceGSTNo, Nullable<int> outwardUserId, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var invoiceNetAmtParameter = invoiceNetAmt.HasValue ?
                new ObjectParameter("InvoiceNetAmt", invoiceNetAmt) :
                new ObjectParameter("InvoiceNetAmt", typeof(decimal));
    
            var serviceAmtParameter = serviceAmt.HasValue ?
                new ObjectParameter("ServiceAmt", serviceAmt) :
                new ObjectParameter("ServiceAmt", typeof(decimal));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(decimal));
    
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(decimal));
    
            var sBUTypeIdParameter = sBUTypeId.HasValue ?
                new ObjectParameter("SBUTypeId", sBUTypeId) :
                new ObjectParameter("SBUTypeId", typeof(int));
    
            var functionParameter = function != null ?
                new ObjectParameter("Function", function) :
                new ObjectParameter("Function", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(decimal));
    
            var invBranchcodeParameter = invBranchcode != null ?
                new ObjectParameter("InvBranchcode", invBranchcode) :
                new ObjectParameter("InvBranchcode", typeof(string));
    
            var fromMonthParameter = fromMonth != null ?
                new ObjectParameter("FromMonth", fromMonth) :
                new ObjectParameter("FromMonth", typeof(string));
    
            var toMonthParameter = toMonth != null ?
                new ObjectParameter("ToMonth", toMonth) :
                new ObjectParameter("ToMonth", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var invoiceGSTNoParameter = invoiceGSTNo != null ?
                new ObjectParameter("InvoiceGSTNo", invoiceGSTNo) :
                new ObjectParameter("InvoiceGSTNo", typeof(string));
    
            var outwardUserIdParameter = outwardUserId.HasValue ?
                new ObjectParameter("OutwardUserId", outwardUserId) :
                new ObjectParameter("OutwardUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertInvoiceIndex_Mailroom", inwardIDParameter, pONoParameter, invoiceNoParameter, invoiceDateParameter, invoiceNetAmtParameter, serviceAmtParameter, vendorIDParameter, sBUIDParameter, sBUTypeIdParameter, functionParameter, branchIDParameter, invBranchcodeParameter, fromMonthParameter, toMonthParameter, descriptionParameter, invoiceGSTNoParameter, outwardUserIdParameter, msg);
        }
    
        public virtual int USP_InsertInvoiceReinitiateData(string inwardID, string pONo, string invoiceNo, string invoiceDate, Nullable<decimal> invoiceAmount, Nullable<decimal> invoiceServiceAmt, string fileOrgName, string fileName, string filePath, string remark, Nullable<int> vendorID, Nullable<int> loginID, Nullable<int> sBUID, string invoiceGSTNo, Nullable<int> plantID, Nullable<int> entityGSTNoID, string gSTTaxType, string currency, ObjectParameter msg, ObjectParameter inwCode)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(decimal));
    
            var invoiceServiceAmtParameter = invoiceServiceAmt.HasValue ?
                new ObjectParameter("InvoiceServiceAmt", invoiceServiceAmt) :
                new ObjectParameter("InvoiceServiceAmt", typeof(decimal));
    
            var fileOrgNameParameter = fileOrgName != null ?
                new ObjectParameter("FileOrgName", fileOrgName) :
                new ObjectParameter("FileOrgName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var invoiceGSTNoParameter = invoiceGSTNo != null ?
                new ObjectParameter("InvoiceGSTNo", invoiceGSTNo) :
                new ObjectParameter("InvoiceGSTNo", typeof(string));
    
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var entityGSTNoIDParameter = entityGSTNoID.HasValue ?
                new ObjectParameter("EntityGSTNoID", entityGSTNoID) :
                new ObjectParameter("EntityGSTNoID", typeof(int));
    
            var gSTTaxTypeParameter = gSTTaxType != null ?
                new ObjectParameter("GSTTaxType", gSTTaxType) :
                new ObjectParameter("GSTTaxType", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertInvoiceReinitiateData", inwardIDParameter, pONoParameter, invoiceNoParameter, invoiceDateParameter, invoiceAmountParameter, invoiceServiceAmtParameter, fileOrgNameParameter, fileNameParameter, filePathParameter, remarkParameter, vendorIDParameter, loginIDParameter, sBUIDParameter, invoiceGSTNoParameter, plantIDParameter, entityGSTNoIDParameter, gSTTaxTypeParameter, currencyParameter, msg, inwCode);
        }
    
        public virtual int USP_InsertMailroomInvoiceData(string sP_InwardId, string sP_PONo, string sP_PlantName, string sP_Barcode, string sP_PurchaserGSTIN, string sP_SupplierGSTIN, string sP_InvoiceDate, string sP_InvoiceNumber, string sP_InvoiceType, string sP_IRNNumber, string sP_InvoiceCurrency, string sP_InvoiceNetAmount, string sP_InvoiceGrossAmount, string sP_Address1, string sP_Address2, string sP_Priority, string sP_FileName, string sP_FilePath, Nullable<int> sP_UserId, Nullable<int> deptID, ObjectParameter sP_MESSAGE)
        {
            var sP_InwardIdParameter = sP_InwardId != null ?
                new ObjectParameter("SP_InwardId", sP_InwardId) :
                new ObjectParameter("SP_InwardId", typeof(string));
    
            var sP_PONoParameter = sP_PONo != null ?
                new ObjectParameter("SP_PONo", sP_PONo) :
                new ObjectParameter("SP_PONo", typeof(string));
    
            var sP_PlantNameParameter = sP_PlantName != null ?
                new ObjectParameter("SP_PlantName", sP_PlantName) :
                new ObjectParameter("SP_PlantName", typeof(string));
    
            var sP_BarcodeParameter = sP_Barcode != null ?
                new ObjectParameter("SP_Barcode", sP_Barcode) :
                new ObjectParameter("SP_Barcode", typeof(string));
    
            var sP_PurchaserGSTINParameter = sP_PurchaserGSTIN != null ?
                new ObjectParameter("SP_PurchaserGSTIN", sP_PurchaserGSTIN) :
                new ObjectParameter("SP_PurchaserGSTIN", typeof(string));
    
            var sP_SupplierGSTINParameter = sP_SupplierGSTIN != null ?
                new ObjectParameter("SP_SupplierGSTIN", sP_SupplierGSTIN) :
                new ObjectParameter("SP_SupplierGSTIN", typeof(string));
    
            var sP_InvoiceDateParameter = sP_InvoiceDate != null ?
                new ObjectParameter("SP_InvoiceDate", sP_InvoiceDate) :
                new ObjectParameter("SP_InvoiceDate", typeof(string));
    
            var sP_InvoiceNumberParameter = sP_InvoiceNumber != null ?
                new ObjectParameter("SP_InvoiceNumber", sP_InvoiceNumber) :
                new ObjectParameter("SP_InvoiceNumber", typeof(string));
    
            var sP_InvoiceTypeParameter = sP_InvoiceType != null ?
                new ObjectParameter("SP_InvoiceType", sP_InvoiceType) :
                new ObjectParameter("SP_InvoiceType", typeof(string));
    
            var sP_IRNNumberParameter = sP_IRNNumber != null ?
                new ObjectParameter("SP_IRNNumber", sP_IRNNumber) :
                new ObjectParameter("SP_IRNNumber", typeof(string));
    
            var sP_InvoiceCurrencyParameter = sP_InvoiceCurrency != null ?
                new ObjectParameter("SP_InvoiceCurrency", sP_InvoiceCurrency) :
                new ObjectParameter("SP_InvoiceCurrency", typeof(string));
    
            var sP_InvoiceNetAmountParameter = sP_InvoiceNetAmount != null ?
                new ObjectParameter("SP_InvoiceNetAmount", sP_InvoiceNetAmount) :
                new ObjectParameter("SP_InvoiceNetAmount", typeof(string));
    
            var sP_InvoiceGrossAmountParameter = sP_InvoiceGrossAmount != null ?
                new ObjectParameter("SP_InvoiceGrossAmount", sP_InvoiceGrossAmount) :
                new ObjectParameter("SP_InvoiceGrossAmount", typeof(string));
    
            var sP_Address1Parameter = sP_Address1 != null ?
                new ObjectParameter("SP_Address1", sP_Address1) :
                new ObjectParameter("SP_Address1", typeof(string));
    
            var sP_Address2Parameter = sP_Address2 != null ?
                new ObjectParameter("SP_Address2", sP_Address2) :
                new ObjectParameter("SP_Address2", typeof(string));
    
            var sP_PriorityParameter = sP_Priority != null ?
                new ObjectParameter("SP_Priority", sP_Priority) :
                new ObjectParameter("SP_Priority", typeof(string));
    
            var sP_FileNameParameter = sP_FileName != null ?
                new ObjectParameter("SP_FileName", sP_FileName) :
                new ObjectParameter("SP_FileName", typeof(string));
    
            var sP_FilePathParameter = sP_FilePath != null ?
                new ObjectParameter("SP_FilePath", sP_FilePath) :
                new ObjectParameter("SP_FilePath", typeof(string));
    
            var sP_UserIdParameter = sP_UserId.HasValue ?
                new ObjectParameter("SP_UserId", sP_UserId) :
                new ObjectParameter("SP_UserId", typeof(int));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertMailroomInvoiceData", sP_InwardIdParameter, sP_PONoParameter, sP_PlantNameParameter, sP_BarcodeParameter, sP_PurchaserGSTINParameter, sP_SupplierGSTINParameter, sP_InvoiceDateParameter, sP_InvoiceNumberParameter, sP_InvoiceTypeParameter, sP_IRNNumberParameter, sP_InvoiceCurrencyParameter, sP_InvoiceNetAmountParameter, sP_InvoiceGrossAmountParameter, sP_Address1Parameter, sP_Address2Parameter, sP_PriorityParameter, sP_FileNameParameter, sP_FilePathParameter, sP_UserIdParameter, deptIDParameter, sP_MESSAGE);
        }
    
        public virtual int USP_InsertMailroomInvoiceQCData(string sP_InwardId, string sP_PONo, string sP_PlantName, string sP_Barcode, string sP_PurchaserGSTIN, string sP_SupplierGSTIN, string sP_InvoiceDate, string sP_InvoiceNumber, string sP_InvoiceType, string sP_IRNNumber, string sP_InvoiceCurrency, string sP_InvoiceNetAmount, string sP_InvoiceGrossAmount, string sP_Address1, string sP_Address2, string sP_Priority, string sP_FileName, string sP_FilePath, Nullable<int> deptID, Nullable<int> sP_UserId, ObjectParameter sP_MESSAGE)
        {
            var sP_InwardIdParameter = sP_InwardId != null ?
                new ObjectParameter("SP_InwardId", sP_InwardId) :
                new ObjectParameter("SP_InwardId", typeof(string));
    
            var sP_PONoParameter = sP_PONo != null ?
                new ObjectParameter("SP_PONo", sP_PONo) :
                new ObjectParameter("SP_PONo", typeof(string));
    
            var sP_PlantNameParameter = sP_PlantName != null ?
                new ObjectParameter("SP_PlantName", sP_PlantName) :
                new ObjectParameter("SP_PlantName", typeof(string));
    
            var sP_BarcodeParameter = sP_Barcode != null ?
                new ObjectParameter("SP_Barcode", sP_Barcode) :
                new ObjectParameter("SP_Barcode", typeof(string));
    
            var sP_PurchaserGSTINParameter = sP_PurchaserGSTIN != null ?
                new ObjectParameter("SP_PurchaserGSTIN", sP_PurchaserGSTIN) :
                new ObjectParameter("SP_PurchaserGSTIN", typeof(string));
    
            var sP_SupplierGSTINParameter = sP_SupplierGSTIN != null ?
                new ObjectParameter("SP_SupplierGSTIN", sP_SupplierGSTIN) :
                new ObjectParameter("SP_SupplierGSTIN", typeof(string));
    
            var sP_InvoiceDateParameter = sP_InvoiceDate != null ?
                new ObjectParameter("SP_InvoiceDate", sP_InvoiceDate) :
                new ObjectParameter("SP_InvoiceDate", typeof(string));
    
            var sP_InvoiceNumberParameter = sP_InvoiceNumber != null ?
                new ObjectParameter("SP_InvoiceNumber", sP_InvoiceNumber) :
                new ObjectParameter("SP_InvoiceNumber", typeof(string));
    
            var sP_InvoiceTypeParameter = sP_InvoiceType != null ?
                new ObjectParameter("SP_InvoiceType", sP_InvoiceType) :
                new ObjectParameter("SP_InvoiceType", typeof(string));
    
            var sP_IRNNumberParameter = sP_IRNNumber != null ?
                new ObjectParameter("SP_IRNNumber", sP_IRNNumber) :
                new ObjectParameter("SP_IRNNumber", typeof(string));
    
            var sP_InvoiceCurrencyParameter = sP_InvoiceCurrency != null ?
                new ObjectParameter("SP_InvoiceCurrency", sP_InvoiceCurrency) :
                new ObjectParameter("SP_InvoiceCurrency", typeof(string));
    
            var sP_InvoiceNetAmountParameter = sP_InvoiceNetAmount != null ?
                new ObjectParameter("SP_InvoiceNetAmount", sP_InvoiceNetAmount) :
                new ObjectParameter("SP_InvoiceNetAmount", typeof(string));
    
            var sP_InvoiceGrossAmountParameter = sP_InvoiceGrossAmount != null ?
                new ObjectParameter("SP_InvoiceGrossAmount", sP_InvoiceGrossAmount) :
                new ObjectParameter("SP_InvoiceGrossAmount", typeof(string));
    
            var sP_Address1Parameter = sP_Address1 != null ?
                new ObjectParameter("SP_Address1", sP_Address1) :
                new ObjectParameter("SP_Address1", typeof(string));
    
            var sP_Address2Parameter = sP_Address2 != null ?
                new ObjectParameter("SP_Address2", sP_Address2) :
                new ObjectParameter("SP_Address2", typeof(string));
    
            var sP_PriorityParameter = sP_Priority != null ?
                new ObjectParameter("SP_Priority", sP_Priority) :
                new ObjectParameter("SP_Priority", typeof(string));
    
            var sP_FileNameParameter = sP_FileName != null ?
                new ObjectParameter("SP_FileName", sP_FileName) :
                new ObjectParameter("SP_FileName", typeof(string));
    
            var sP_FilePathParameter = sP_FilePath != null ?
                new ObjectParameter("SP_FilePath", sP_FilePath) :
                new ObjectParameter("SP_FilePath", typeof(string));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            var sP_UserIdParameter = sP_UserId.HasValue ?
                new ObjectParameter("SP_UserId", sP_UserId) :
                new ObjectParameter("SP_UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertMailroomInvoiceQCData", sP_InwardIdParameter, sP_PONoParameter, sP_PlantNameParameter, sP_BarcodeParameter, sP_PurchaserGSTINParameter, sP_SupplierGSTINParameter, sP_InvoiceDateParameter, sP_InvoiceNumberParameter, sP_InvoiceTypeParameter, sP_IRNNumberParameter, sP_InvoiceCurrencyParameter, sP_InvoiceNetAmountParameter, sP_InvoiceGrossAmountParameter, sP_Address1Parameter, sP_Address2Parameter, sP_PriorityParameter, sP_FileNameParameter, sP_FilePathParameter, deptIDParameter, sP_UserIdParameter, sP_MESSAGE);
        }
    
        public virtual int USP_InsertMailroomReinitiateInvoiceData(string sP_InwardId, string sP_PONo, string sP_PlantName, string sP_Barcode, string sP_PurchaserGSTIN, string sP_SupplierGSTIN, string sP_InvoiceDate, string sP_InvoiceNumber, string sP_InvoiceType, string sP_IRNNumber, string sP_InvoiceCurrency, string sP_InvoiceNetAmount, string sP_InvoiceGrossAmount, string sP_Address1, string sP_Address2, string sP_Priority, string sP_FileName, string sP_FilePath, Nullable<int> sP_UserId, Nullable<int> deptID, string sP_OldInwardId, ObjectParameter sP_MESSAGE)
        {
            var sP_InwardIdParameter = sP_InwardId != null ?
                new ObjectParameter("SP_InwardId", sP_InwardId) :
                new ObjectParameter("SP_InwardId", typeof(string));
    
            var sP_PONoParameter = sP_PONo != null ?
                new ObjectParameter("SP_PONo", sP_PONo) :
                new ObjectParameter("SP_PONo", typeof(string));
    
            var sP_PlantNameParameter = sP_PlantName != null ?
                new ObjectParameter("SP_PlantName", sP_PlantName) :
                new ObjectParameter("SP_PlantName", typeof(string));
    
            var sP_BarcodeParameter = sP_Barcode != null ?
                new ObjectParameter("SP_Barcode", sP_Barcode) :
                new ObjectParameter("SP_Barcode", typeof(string));
    
            var sP_PurchaserGSTINParameter = sP_PurchaserGSTIN != null ?
                new ObjectParameter("SP_PurchaserGSTIN", sP_PurchaserGSTIN) :
                new ObjectParameter("SP_PurchaserGSTIN", typeof(string));
    
            var sP_SupplierGSTINParameter = sP_SupplierGSTIN != null ?
                new ObjectParameter("SP_SupplierGSTIN", sP_SupplierGSTIN) :
                new ObjectParameter("SP_SupplierGSTIN", typeof(string));
    
            var sP_InvoiceDateParameter = sP_InvoiceDate != null ?
                new ObjectParameter("SP_InvoiceDate", sP_InvoiceDate) :
                new ObjectParameter("SP_InvoiceDate", typeof(string));
    
            var sP_InvoiceNumberParameter = sP_InvoiceNumber != null ?
                new ObjectParameter("SP_InvoiceNumber", sP_InvoiceNumber) :
                new ObjectParameter("SP_InvoiceNumber", typeof(string));
    
            var sP_InvoiceTypeParameter = sP_InvoiceType != null ?
                new ObjectParameter("SP_InvoiceType", sP_InvoiceType) :
                new ObjectParameter("SP_InvoiceType", typeof(string));
    
            var sP_IRNNumberParameter = sP_IRNNumber != null ?
                new ObjectParameter("SP_IRNNumber", sP_IRNNumber) :
                new ObjectParameter("SP_IRNNumber", typeof(string));
    
            var sP_InvoiceCurrencyParameter = sP_InvoiceCurrency != null ?
                new ObjectParameter("SP_InvoiceCurrency", sP_InvoiceCurrency) :
                new ObjectParameter("SP_InvoiceCurrency", typeof(string));
    
            var sP_InvoiceNetAmountParameter = sP_InvoiceNetAmount != null ?
                new ObjectParameter("SP_InvoiceNetAmount", sP_InvoiceNetAmount) :
                new ObjectParameter("SP_InvoiceNetAmount", typeof(string));
    
            var sP_InvoiceGrossAmountParameter = sP_InvoiceGrossAmount != null ?
                new ObjectParameter("SP_InvoiceGrossAmount", sP_InvoiceGrossAmount) :
                new ObjectParameter("SP_InvoiceGrossAmount", typeof(string));
    
            var sP_Address1Parameter = sP_Address1 != null ?
                new ObjectParameter("SP_Address1", sP_Address1) :
                new ObjectParameter("SP_Address1", typeof(string));
    
            var sP_Address2Parameter = sP_Address2 != null ?
                new ObjectParameter("SP_Address2", sP_Address2) :
                new ObjectParameter("SP_Address2", typeof(string));
    
            var sP_PriorityParameter = sP_Priority != null ?
                new ObjectParameter("SP_Priority", sP_Priority) :
                new ObjectParameter("SP_Priority", typeof(string));
    
            var sP_FileNameParameter = sP_FileName != null ?
                new ObjectParameter("SP_FileName", sP_FileName) :
                new ObjectParameter("SP_FileName", typeof(string));
    
            var sP_FilePathParameter = sP_FilePath != null ?
                new ObjectParameter("SP_FilePath", sP_FilePath) :
                new ObjectParameter("SP_FilePath", typeof(string));
    
            var sP_UserIdParameter = sP_UserId.HasValue ?
                new ObjectParameter("SP_UserId", sP_UserId) :
                new ObjectParameter("SP_UserId", typeof(int));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            var sP_OldInwardIdParameter = sP_OldInwardId != null ?
                new ObjectParameter("SP_OldInwardId", sP_OldInwardId) :
                new ObjectParameter("SP_OldInwardId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertMailroomReinitiateInvoiceData", sP_InwardIdParameter, sP_PONoParameter, sP_PlantNameParameter, sP_BarcodeParameter, sP_PurchaserGSTINParameter, sP_SupplierGSTINParameter, sP_InvoiceDateParameter, sP_InvoiceNumberParameter, sP_InvoiceTypeParameter, sP_IRNNumberParameter, sP_InvoiceCurrencyParameter, sP_InvoiceNetAmountParameter, sP_InvoiceGrossAmountParameter, sP_Address1Parameter, sP_Address2Parameter, sP_PriorityParameter, sP_FileNameParameter, sP_FilePathParameter, sP_UserIdParameter, deptIDParameter, sP_OldInwardIdParameter, sP_MESSAGE);
        }
    
        public virtual int USP_INSERTREJECTDATA_AP(string invoiceCode, string empCode, Nullable<decimal> functionId, Nullable<decimal> level, string approvalSentDate, string mailStatus, string remark)
        {
            var invoiceCodeParameter = invoiceCode != null ?
                new ObjectParameter("InvoiceCode", invoiceCode) :
                new ObjectParameter("InvoiceCode", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("functionId", functionId) :
                new ObjectParameter("functionId", typeof(decimal));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(decimal));
    
            var approvalSentDateParameter = approvalSentDate != null ?
                new ObjectParameter("ApprovalSentDate", approvalSentDate) :
                new ObjectParameter("ApprovalSentDate", typeof(string));
    
            var mailStatusParameter = mailStatus != null ?
                new ObjectParameter("MailStatus", mailStatus) :
                new ObjectParameter("MailStatus", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_INSERTREJECTDATA_AP", invoiceCodeParameter, empCodeParameter, functionIdParameter, levelParameter, approvalSentDateParameter, mailStatusParameter, remarkParameter);
        }
    
        public virtual int USP_InsertRejectMailroomInvoiceData(string sP_InwardID, Nullable<int> sP_RejectId, string sP_RejectRemark, Nullable<int> sP_UserId, ObjectParameter sP_MESSAGE)
        {
            var sP_InwardIDParameter = sP_InwardID != null ?
                new ObjectParameter("SP_InwardID", sP_InwardID) :
                new ObjectParameter("SP_InwardID", typeof(string));
    
            var sP_RejectIdParameter = sP_RejectId.HasValue ?
                new ObjectParameter("SP_RejectId", sP_RejectId) :
                new ObjectParameter("SP_RejectId", typeof(int));
    
            var sP_RejectRemarkParameter = sP_RejectRemark != null ?
                new ObjectParameter("SP_RejectRemark", sP_RejectRemark) :
                new ObjectParameter("SP_RejectRemark", typeof(string));
    
            var sP_UserIdParameter = sP_UserId.HasValue ?
                new ObjectParameter("SP_UserId", sP_UserId) :
                new ObjectParameter("SP_UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertRejectMailroomInvoiceData", sP_InwardIDParameter, sP_RejectIdParameter, sP_RejectRemarkParameter, sP_UserIdParameter, sP_MESSAGE);
        }
    
        public virtual int USP_InsertVendorData(Nullable<int> sP_RegId, Nullable<int> sP_UserId, string sP_VendPWD, string sP_Tag, ObjectParameter sP_VendUserId, ObjectParameter sP_MESSAGE)
        {
            var sP_RegIdParameter = sP_RegId.HasValue ?
                new ObjectParameter("SP_RegId", sP_RegId) :
                new ObjectParameter("SP_RegId", typeof(int));
    
            var sP_UserIdParameter = sP_UserId.HasValue ?
                new ObjectParameter("SP_UserId", sP_UserId) :
                new ObjectParameter("SP_UserId", typeof(int));
    
            var sP_VendPWDParameter = sP_VendPWD != null ?
                new ObjectParameter("SP_VendPWD", sP_VendPWD) :
                new ObjectParameter("SP_VendPWD", typeof(string));
    
            var sP_TagParameter = sP_Tag != null ?
                new ObjectParameter("SP_Tag", sP_Tag) :
                new ObjectParameter("SP_Tag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertVendorData", sP_RegIdParameter, sP_UserIdParameter, sP_VendPWDParameter, sP_TagParameter, sP_VendUserId, sP_MESSAGE);
        }
    
        public virtual int USP_InsertVendorInvoiceData(string inwardID, string pONo, string invoiceNo, string invoiceDate, Nullable<decimal> invoiceAmount, Nullable<decimal> invoiceServiceAmt, string fileOrgName, string fileName, string filePath, string remark, Nullable<int> vendorID, Nullable<int> loginID, Nullable<int> sBUID, string invoiceGSTNo, Nullable<int> plantID, Nullable<int> entityGSTNoID, string gSTTaxType, string currency, Nullable<int> tDSSectionID, string tDSRate, string tDSCode, string tDSAmount, ObjectParameter msg, ObjectParameter inwCode)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(decimal));
    
            var invoiceServiceAmtParameter = invoiceServiceAmt.HasValue ?
                new ObjectParameter("InvoiceServiceAmt", invoiceServiceAmt) :
                new ObjectParameter("InvoiceServiceAmt", typeof(decimal));
    
            var fileOrgNameParameter = fileOrgName != null ?
                new ObjectParameter("FileOrgName", fileOrgName) :
                new ObjectParameter("FileOrgName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var invoiceGSTNoParameter = invoiceGSTNo != null ?
                new ObjectParameter("InvoiceGSTNo", invoiceGSTNo) :
                new ObjectParameter("InvoiceGSTNo", typeof(string));
    
            var plantIDParameter = plantID.HasValue ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(int));
    
            var entityGSTNoIDParameter = entityGSTNoID.HasValue ?
                new ObjectParameter("EntityGSTNoID", entityGSTNoID) :
                new ObjectParameter("EntityGSTNoID", typeof(int));
    
            var gSTTaxTypeParameter = gSTTaxType != null ?
                new ObjectParameter("GSTTaxType", gSTTaxType) :
                new ObjectParameter("GSTTaxType", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var tDSSectionIDParameter = tDSSectionID.HasValue ?
                new ObjectParameter("TDSSectionID", tDSSectionID) :
                new ObjectParameter("TDSSectionID", typeof(int));
    
            var tDSRateParameter = tDSRate != null ?
                new ObjectParameter("TDSRate", tDSRate) :
                new ObjectParameter("TDSRate", typeof(string));
    
            var tDSCodeParameter = tDSCode != null ?
                new ObjectParameter("TDSCode", tDSCode) :
                new ObjectParameter("TDSCode", typeof(string));
    
            var tDSAmountParameter = tDSAmount != null ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertVendorInvoiceData", inwardIDParameter, pONoParameter, invoiceNoParameter, invoiceDateParameter, invoiceAmountParameter, invoiceServiceAmtParameter, fileOrgNameParameter, fileNameParameter, filePathParameter, remarkParameter, vendorIDParameter, loginIDParameter, sBUIDParameter, invoiceGSTNoParameter, plantIDParameter, entityGSTNoIDParameter, gSTTaxTypeParameter, currencyParameter, tDSSectionIDParameter, tDSRateParameter, tDSCodeParameter, tDSAmountParameter, msg, inwCode);
        }
    
        public virtual int USP_InsertVendorPOMapping(Nullable<int> vendID)
        {
            var vendIDParameter = vendID.HasValue ?
                new ObjectParameter("VendID", vendID) :
                new ObjectParameter("VendID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertVendorPOMapping", vendIDParameter);
        }
    
        public virtual int USP_InsertVendorRegistration(string companyName, string emailID, string orgTypeKey, Nullable<int> countryID, string contactPerson, string contactPersonDesig, Nullable<decimal> landlineNumber, Nullable<decimal> mobileNo1, Nullable<decimal> mobileNo2, string address, string zipCode, string services, string oTP, Nullable<int> vendRegID, Nullable<int> updateBy, ObjectParameter msg, ObjectParameter regID)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var orgTypeKeyParameter = orgTypeKey != null ?
                new ObjectParameter("OrgTypeKey", orgTypeKey) :
                new ObjectParameter("OrgTypeKey", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactPersonDesigParameter = contactPersonDesig != null ?
                new ObjectParameter("ContactPersonDesig", contactPersonDesig) :
                new ObjectParameter("ContactPersonDesig", typeof(string));
    
            var landlineNumberParameter = landlineNumber.HasValue ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(decimal));
    
            var mobileNo1Parameter = mobileNo1.HasValue ?
                new ObjectParameter("MobileNo1", mobileNo1) :
                new ObjectParameter("MobileNo1", typeof(decimal));
    
            var mobileNo2Parameter = mobileNo2.HasValue ?
                new ObjectParameter("MobileNo2", mobileNo2) :
                new ObjectParameter("MobileNo2", typeof(decimal));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var servicesParameter = services != null ?
                new ObjectParameter("Services", services) :
                new ObjectParameter("Services", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            var vendRegIDParameter = vendRegID.HasValue ?
                new ObjectParameter("VendRegID", vendRegID) :
                new ObjectParameter("VendRegID", typeof(int));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertVendorRegistration", companyNameParameter, emailIDParameter, orgTypeKeyParameter, countryIDParameter, contactPersonParameter, contactPersonDesigParameter, landlineNumberParameter, mobileNo1Parameter, mobileNo2Parameter, addressParameter, zipCodeParameter, servicesParameter, oTPParameter, vendRegIDParameter, updateByParameter, msg, regID);
        }
    
        public virtual int USP_InsertWIMSInvoiceInward(string inwardID, string pONo, string invoiceNo, string invoiceDate, Nullable<decimal> invoiceNetAmt, Nullable<decimal> serviceAmt, Nullable<decimal> vendorID, Nullable<decimal> sBUID, Nullable<int> sBUTypeId, string function, Nullable<decimal> branchID, string invBranchcode, string fromMonth, string toMonth, string description, string invoiceGSTNo, string plantName, string fileName, string filePath, Nullable<int> outwardUserId, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var invoiceNetAmtParameter = invoiceNetAmt.HasValue ?
                new ObjectParameter("InvoiceNetAmt", invoiceNetAmt) :
                new ObjectParameter("InvoiceNetAmt", typeof(decimal));
    
            var serviceAmtParameter = serviceAmt.HasValue ?
                new ObjectParameter("ServiceAmt", serviceAmt) :
                new ObjectParameter("ServiceAmt", typeof(decimal));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(decimal));
    
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(decimal));
    
            var sBUTypeIdParameter = sBUTypeId.HasValue ?
                new ObjectParameter("SBUTypeId", sBUTypeId) :
                new ObjectParameter("SBUTypeId", typeof(int));
    
            var functionParameter = function != null ?
                new ObjectParameter("Function", function) :
                new ObjectParameter("Function", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(decimal));
    
            var invBranchcodeParameter = invBranchcode != null ?
                new ObjectParameter("InvBranchcode", invBranchcode) :
                new ObjectParameter("InvBranchcode", typeof(string));
    
            var fromMonthParameter = fromMonth != null ?
                new ObjectParameter("FromMonth", fromMonth) :
                new ObjectParameter("FromMonth", typeof(string));
    
            var toMonthParameter = toMonth != null ?
                new ObjectParameter("ToMonth", toMonth) :
                new ObjectParameter("ToMonth", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var invoiceGSTNoParameter = invoiceGSTNo != null ?
                new ObjectParameter("InvoiceGSTNo", invoiceGSTNo) :
                new ObjectParameter("InvoiceGSTNo", typeof(string));
    
            var plantNameParameter = plantName != null ?
                new ObjectParameter("PlantName", plantName) :
                new ObjectParameter("PlantName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var outwardUserIdParameter = outwardUserId.HasValue ?
                new ObjectParameter("OutwardUserId", outwardUserId) :
                new ObjectParameter("OutwardUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertWIMSInvoiceInward", inwardIDParameter, pONoParameter, invoiceNoParameter, invoiceDateParameter, invoiceNetAmtParameter, serviceAmtParameter, vendorIDParameter, sBUIDParameter, sBUTypeIdParameter, functionParameter, branchIDParameter, invBranchcodeParameter, fromMonthParameter, toMonthParameter, descriptionParameter, invoiceGSTNoParameter, plantNameParameter, fileNameParameter, filePathParameter, outwardUserIdParameter, msg);
        }
    
        public virtual int USP_InvoiceApprovalAP_LockUnlock(string sP_ProcessId, Nullable<int> sP_UserID, string sP_IsLock, string sP_LockedAt, ObjectParameter sP_MESSAGE)
        {
            var sP_ProcessIdParameter = sP_ProcessId != null ?
                new ObjectParameter("SP_ProcessId", sP_ProcessId) :
                new ObjectParameter("SP_ProcessId", typeof(string));
    
            var sP_UserIDParameter = sP_UserID.HasValue ?
                new ObjectParameter("SP_UserID", sP_UserID) :
                new ObjectParameter("SP_UserID", typeof(int));
    
            var sP_IsLockParameter = sP_IsLock != null ?
                new ObjectParameter("SP_IsLock", sP_IsLock) :
                new ObjectParameter("SP_IsLock", typeof(string));
    
            var sP_LockedAtParameter = sP_LockedAt != null ?
                new ObjectParameter("SP_LockedAt", sP_LockedAt) :
                new ObjectParameter("SP_LockedAt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InvoiceApprovalAP_LockUnlock", sP_ProcessIdParameter, sP_UserIDParameter, sP_IsLockParameter, sP_LockedAtParameter, sP_MESSAGE);
        }
    
        public virtual ObjectResult<USP_LOGIN_Result> USP_LOGIN(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_LOGIN_Result>("USP_LOGIN", usernameParameter, passwordParameter);
        }
    
        public virtual int USP_MailroomInvoice_LockUnlock(string sP_ProcessId, Nullable<int> sP_UserID, string sP_IsLock, ObjectParameter sP_MESSAGE)
        {
            var sP_ProcessIdParameter = sP_ProcessId != null ?
                new ObjectParameter("SP_ProcessId", sP_ProcessId) :
                new ObjectParameter("SP_ProcessId", typeof(string));
    
            var sP_UserIDParameter = sP_UserID.HasValue ?
                new ObjectParameter("SP_UserID", sP_UserID) :
                new ObjectParameter("SP_UserID", typeof(int));
    
            var sP_IsLockParameter = sP_IsLock != null ?
                new ObjectParameter("SP_IsLock", sP_IsLock) :
                new ObjectParameter("SP_IsLock", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MailroomInvoice_LockUnlock", sP_ProcessIdParameter, sP_UserIDParameter, sP_IsLockParameter, sP_MESSAGE);
        }
    
        public virtual int USP_MailroomQC_LockUnlock(string sP_ProcessId, Nullable<int> sP_UserID, string sP_IsLock, ObjectParameter sP_MESSAGE)
        {
            var sP_ProcessIdParameter = sP_ProcessId != null ?
                new ObjectParameter("SP_ProcessId", sP_ProcessId) :
                new ObjectParameter("SP_ProcessId", typeof(string));
    
            var sP_UserIDParameter = sP_UserID.HasValue ?
                new ObjectParameter("SP_UserID", sP_UserID) :
                new ObjectParameter("SP_UserID", typeof(int));
    
            var sP_IsLockParameter = sP_IsLock != null ?
                new ObjectParameter("SP_IsLock", sP_IsLock) :
                new ObjectParameter("SP_IsLock", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MailroomQC_LockUnlock", sP_ProcessIdParameter, sP_UserIDParameter, sP_IsLockParameter, sP_MESSAGE);
        }
    
        public virtual int USP_MailroomRejectList_LockUnlock(string inwardID, Nullable<int> userID, string isLock, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isLockParameter = isLock != null ?
                new ObjectParameter("IsLock", isLock) :
                new ObjectParameter("IsLock", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MailroomRejectList_LockUnlock", inwardIDParameter, userIDParameter, isLockParameter, msg);
        }
    
        public virtual ObjectResult<string> USP_POSTLOGIN(string login_IPAddress, Nullable<decimal> attempt_Count, Nullable<decimal> userId)
        {
            var login_IPAddressParameter = login_IPAddress != null ?
                new ObjectParameter("Login_IPAddress", login_IPAddress) :
                new ObjectParameter("Login_IPAddress", typeof(string));
    
            var attempt_CountParameter = attempt_Count.HasValue ?
                new ObjectParameter("Attempt_Count", attempt_Count) :
                new ObjectParameter("Attempt_Count", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_POSTLOGIN", login_IPAddressParameter, attempt_CountParameter, userIdParameter);
        }
    
        public virtual ObjectResult<USP_PreviousOCRData_ByFileName_Result> USP_PreviousOCRData_ByFileName(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_PreviousOCRData_ByFileName_Result>("USP_PreviousOCRData_ByFileName", fileNameParameter);
        }
    
        public virtual ObjectResult<string> USP_RejectDataValidation_AP(string invoiceCode, Nullable<int> rejectedId, string rejectedType, string rejectedRemark, Nullable<int> userID)
        {
            var invoiceCodeParameter = invoiceCode != null ?
                new ObjectParameter("InvoiceCode", invoiceCode) :
                new ObjectParameter("InvoiceCode", typeof(string));
    
            var rejectedIdParameter = rejectedId.HasValue ?
                new ObjectParameter("RejectedId", rejectedId) :
                new ObjectParameter("RejectedId", typeof(int));
    
            var rejectedTypeParameter = rejectedType != null ?
                new ObjectParameter("RejectedType", rejectedType) :
                new ObjectParameter("RejectedType", typeof(string));
    
            var rejectedRemarkParameter = rejectedRemark != null ?
                new ObjectParameter("RejectedRemark", rejectedRemark) :
                new ObjectParameter("RejectedRemark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_RejectDataValidation_AP", invoiceCodeParameter, rejectedIdParameter, rejectedTypeParameter, rejectedRemarkParameter, userIDParameter);
        }
    
        public virtual int USP_RejectVendorData(Nullable<int> sP_RegId, string sP_RejectReason, string sP_RejectRemark, Nullable<int> sP_UserId, string sP_Tag, ObjectParameter sP_MESSAGE)
        {
            var sP_RegIdParameter = sP_RegId.HasValue ?
                new ObjectParameter("SP_RegId", sP_RegId) :
                new ObjectParameter("SP_RegId", typeof(int));
    
            var sP_RejectReasonParameter = sP_RejectReason != null ?
                new ObjectParameter("SP_RejectReason", sP_RejectReason) :
                new ObjectParameter("SP_RejectReason", typeof(string));
    
            var sP_RejectRemarkParameter = sP_RejectRemark != null ?
                new ObjectParameter("SP_RejectRemark", sP_RejectRemark) :
                new ObjectParameter("SP_RejectRemark", typeof(string));
    
            var sP_UserIdParameter = sP_UserId.HasValue ?
                new ObjectParameter("SP_UserId", sP_UserId) :
                new ObjectParameter("SP_UserId", typeof(int));
    
            var sP_TagParameter = sP_Tag != null ?
                new ObjectParameter("SP_Tag", sP_Tag) :
                new ObjectParameter("SP_Tag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_RejectVendorData", sP_RegIdParameter, sP_RejectReasonParameter, sP_RejectRemarkParameter, sP_UserIdParameter, sP_TagParameter, sP_MESSAGE);
        }
    
        public virtual int USP_RejectWIMSInvoiceInward(string inwardID, string rejectRemark, Nullable<int> loginUserID, string checkListData, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var rejectRemarkParameter = rejectRemark != null ?
                new ObjectParameter("RejectRemark", rejectRemark) :
                new ObjectParameter("RejectRemark", typeof(string));
    
            var loginUserIDParameter = loginUserID.HasValue ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(int));
    
            var checkListDataParameter = checkListData != null ?
                new ObjectParameter("CheckListData", checkListData) :
                new ObjectParameter("CheckListData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_RejectWIMSInvoiceInward", inwardIDParameter, rejectRemarkParameter, loginUserIDParameter, checkListDataParameter, msg);
        }
    
        public virtual int USP_SaveInvoiceGST_ItemDetails(string inwardID, Nullable<int> branchID, Nullable<int> sBUID, string gSTNo, string itemCode, string description, string hSNCode, Nullable<decimal> qty, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<decimal> gSTAmount, Nullable<decimal> grossAmt, Nullable<decimal> rCM, Nullable<int> entryBy, Nullable<int> itemId, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> cESSAmount, Nullable<decimal> gSTPercentage, Nullable<decimal> discountPercent, Nullable<decimal> amountTotal, Nullable<decimal> tDSAmount, Nullable<int> lineSeqNo, Nullable<decimal> toleranceAmt, string toleranceUnit, string costCentreCode, string gLCode, string plantName)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var sBUIDParameter = sBUID.HasValue ?
                new ObjectParameter("SBUID", sBUID) :
                new ObjectParameter("SBUID", typeof(int));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var hSNCodeParameter = hSNCode != null ?
                new ObjectParameter("HSNCode", hSNCode) :
                new ObjectParameter("HSNCode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var gSTAmountParameter = gSTAmount.HasValue ?
                new ObjectParameter("GSTAmount", gSTAmount) :
                new ObjectParameter("GSTAmount", typeof(decimal));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var rCMParameter = rCM.HasValue ?
                new ObjectParameter("RCM", rCM) :
                new ObjectParameter("RCM", typeof(decimal));
    
            var entryByParameter = entryBy.HasValue ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var cESSAmountParameter = cESSAmount.HasValue ?
                new ObjectParameter("CESSAmount", cESSAmount) :
                new ObjectParameter("CESSAmount", typeof(decimal));
    
            var gSTPercentageParameter = gSTPercentage.HasValue ?
                new ObjectParameter("GSTPercentage", gSTPercentage) :
                new ObjectParameter("GSTPercentage", typeof(decimal));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var amountTotalParameter = amountTotal.HasValue ?
                new ObjectParameter("AmountTotal", amountTotal) :
                new ObjectParameter("AmountTotal", typeof(decimal));
    
            var tDSAmountParameter = tDSAmount.HasValue ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(decimal));
    
            var lineSeqNoParameter = lineSeqNo.HasValue ?
                new ObjectParameter("LineSeqNo", lineSeqNo) :
                new ObjectParameter("LineSeqNo", typeof(int));
    
            var toleranceAmtParameter = toleranceAmt.HasValue ?
                new ObjectParameter("ToleranceAmt", toleranceAmt) :
                new ObjectParameter("ToleranceAmt", typeof(decimal));
    
            var toleranceUnitParameter = toleranceUnit != null ?
                new ObjectParameter("ToleranceUnit", toleranceUnit) :
                new ObjectParameter("ToleranceUnit", typeof(string));
    
            var costCentreCodeParameter = costCentreCode != null ?
                new ObjectParameter("CostCentreCode", costCentreCode) :
                new ObjectParameter("CostCentreCode", typeof(string));
    
            var gLCodeParameter = gLCode != null ?
                new ObjectParameter("GLCode", gLCode) :
                new ObjectParameter("GLCode", typeof(string));
    
            var plantNameParameter = plantName != null ?
                new ObjectParameter("PlantName", plantName) :
                new ObjectParameter("PlantName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SaveInvoiceGST_ItemDetails", inwardIDParameter, branchIDParameter, sBUIDParameter, gSTNoParameter, itemCodeParameter, descriptionParameter, hSNCodeParameter, qtyParameter, rateParameter, amountParameter, gSTAmountParameter, grossAmtParameter, rCMParameter, entryByParameter, itemIdParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, cESSAmountParameter, gSTPercentageParameter, discountPercentParameter, amountTotalParameter, tDSAmountParameter, lineSeqNoParameter, toleranceAmtParameter, toleranceUnitParameter, costCentreCodeParameter, gLCodeParameter, plantNameParameter);
        }
    
        public virtual ObjectResult<string> USP_SETVALIDATIOM(string invoiceCode, string isValid, Nullable<int> userID)
        {
            var invoiceCodeParameter = invoiceCode != null ?
                new ObjectParameter("InvoiceCode", invoiceCode) :
                new ObjectParameter("InvoiceCode", typeof(string));
    
            var isValidParameter = isValid != null ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_SETVALIDATIOM", invoiceCodeParameter, isValidParameter, userIDParameter);
        }
    
        public virtual ObjectResult<string> USP_Update_InvoiceValidion_Rejecte(string inwardID, string remark, Nullable<int> rejectedBy, Nullable<int> rejectedID, string isNCRejectType, Nullable<int> rejectionUserID)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var rejectedByParameter = rejectedBy.HasValue ?
                new ObjectParameter("RejectedBy", rejectedBy) :
                new ObjectParameter("RejectedBy", typeof(int));
    
            var rejectedIDParameter = rejectedID.HasValue ?
                new ObjectParameter("RejectedID", rejectedID) :
                new ObjectParameter("RejectedID", typeof(int));
    
            var isNCRejectTypeParameter = isNCRejectType != null ?
                new ObjectParameter("IsNCRejectType", isNCRejectType) :
                new ObjectParameter("IsNCRejectType", typeof(string));
    
            var rejectionUserIDParameter = rejectionUserID.HasValue ?
                new ObjectParameter("RejectionUserID", rejectionUserID) :
                new ObjectParameter("RejectionUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_Update_InvoiceValidion_Rejecte", inwardIDParameter, remarkParameter, rejectedByParameter, rejectedIDParameter, isNCRejectTypeParameter, rejectionUserIDParameter);
        }
    
        public virtual int USP_UpdateInvCheckList(string inwardID, Nullable<int> chkListID, string status, Nullable<int> userID, Nullable<int> iCount, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var chkListIDParameter = chkListID.HasValue ?
                new ObjectParameter("ChkListID", chkListID) :
                new ObjectParameter("ChkListID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var iCountParameter = iCount.HasValue ?
                new ObjectParameter("iCount", iCount) :
                new ObjectParameter("iCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateInvCheckList", inwardIDParameter, chkListIDParameter, statusParameter, userIDParameter, iCountParameter, msg);
        }
    
        public virtual int USP_UpdateInvoiceReinitiateFile(string inwardID, string fileOrgName, string fileName, string filePath, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var fileOrgNameParameter = fileOrgName != null ?
                new ObjectParameter("FileOrgName", fileOrgName) :
                new ObjectParameter("FileOrgName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateInvoiceReinitiateFile", inwardIDParameter, fileOrgNameParameter, fileNameParameter, filePathParameter, msg);
        }
    
        public virtual int USP_UpdateMailroomFinalReject(string inwardID, Nullable<int> rejectID, string addRemark, Nullable<int> userID, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var rejectIDParameter = rejectID.HasValue ?
                new ObjectParameter("RejectID", rejectID) :
                new ObjectParameter("RejectID", typeof(int));
    
            var addRemarkParameter = addRemark != null ?
                new ObjectParameter("AddRemark", addRemark) :
                new ObjectParameter("AddRemark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateMailroomFinalReject", inwardIDParameter, rejectIDParameter, addRemarkParameter, userIDParameter, msg);
        }
    
        public virtual int USP_UpdateMailroomRejectedDetails(string sP_InwardId, string sP_PONo, string sP_PlantName, string sP_Barcode, string sP_PurchaserGSTIN, string sP_SupplierGSTIN, string sP_InvoiceDate, string sP_InvoiceNumber, string sP_InvoiceType, string sP_IRNNumber, string sP_InvoiceCurrency, string sP_InvoiceNetAmount, string sP_InvoiceGrossAmount, string sP_Address1, string sP_Address2, string sP_Priority, string sP_FileName, string sP_FilePath, string addRemark, string actionType, Nullable<int> deptID, Nullable<int> sP_UserId, ObjectParameter sP_MESSAGE)
        {
            var sP_InwardIdParameter = sP_InwardId != null ?
                new ObjectParameter("SP_InwardId", sP_InwardId) :
                new ObjectParameter("SP_InwardId", typeof(string));
    
            var sP_PONoParameter = sP_PONo != null ?
                new ObjectParameter("SP_PONo", sP_PONo) :
                new ObjectParameter("SP_PONo", typeof(string));
    
            var sP_PlantNameParameter = sP_PlantName != null ?
                new ObjectParameter("SP_PlantName", sP_PlantName) :
                new ObjectParameter("SP_PlantName", typeof(string));
    
            var sP_BarcodeParameter = sP_Barcode != null ?
                new ObjectParameter("SP_Barcode", sP_Barcode) :
                new ObjectParameter("SP_Barcode", typeof(string));
    
            var sP_PurchaserGSTINParameter = sP_PurchaserGSTIN != null ?
                new ObjectParameter("SP_PurchaserGSTIN", sP_PurchaserGSTIN) :
                new ObjectParameter("SP_PurchaserGSTIN", typeof(string));
    
            var sP_SupplierGSTINParameter = sP_SupplierGSTIN != null ?
                new ObjectParameter("SP_SupplierGSTIN", sP_SupplierGSTIN) :
                new ObjectParameter("SP_SupplierGSTIN", typeof(string));
    
            var sP_InvoiceDateParameter = sP_InvoiceDate != null ?
                new ObjectParameter("SP_InvoiceDate", sP_InvoiceDate) :
                new ObjectParameter("SP_InvoiceDate", typeof(string));
    
            var sP_InvoiceNumberParameter = sP_InvoiceNumber != null ?
                new ObjectParameter("SP_InvoiceNumber", sP_InvoiceNumber) :
                new ObjectParameter("SP_InvoiceNumber", typeof(string));
    
            var sP_InvoiceTypeParameter = sP_InvoiceType != null ?
                new ObjectParameter("SP_InvoiceType", sP_InvoiceType) :
                new ObjectParameter("SP_InvoiceType", typeof(string));
    
            var sP_IRNNumberParameter = sP_IRNNumber != null ?
                new ObjectParameter("SP_IRNNumber", sP_IRNNumber) :
                new ObjectParameter("SP_IRNNumber", typeof(string));
    
            var sP_InvoiceCurrencyParameter = sP_InvoiceCurrency != null ?
                new ObjectParameter("SP_InvoiceCurrency", sP_InvoiceCurrency) :
                new ObjectParameter("SP_InvoiceCurrency", typeof(string));
    
            var sP_InvoiceNetAmountParameter = sP_InvoiceNetAmount != null ?
                new ObjectParameter("SP_InvoiceNetAmount", sP_InvoiceNetAmount) :
                new ObjectParameter("SP_InvoiceNetAmount", typeof(string));
    
            var sP_InvoiceGrossAmountParameter = sP_InvoiceGrossAmount != null ?
                new ObjectParameter("SP_InvoiceGrossAmount", sP_InvoiceGrossAmount) :
                new ObjectParameter("SP_InvoiceGrossAmount", typeof(string));
    
            var sP_Address1Parameter = sP_Address1 != null ?
                new ObjectParameter("SP_Address1", sP_Address1) :
                new ObjectParameter("SP_Address1", typeof(string));
    
            var sP_Address2Parameter = sP_Address2 != null ?
                new ObjectParameter("SP_Address2", sP_Address2) :
                new ObjectParameter("SP_Address2", typeof(string));
    
            var sP_PriorityParameter = sP_Priority != null ?
                new ObjectParameter("SP_Priority", sP_Priority) :
                new ObjectParameter("SP_Priority", typeof(string));
    
            var sP_FileNameParameter = sP_FileName != null ?
                new ObjectParameter("SP_FileName", sP_FileName) :
                new ObjectParameter("SP_FileName", typeof(string));
    
            var sP_FilePathParameter = sP_FilePath != null ?
                new ObjectParameter("SP_FilePath", sP_FilePath) :
                new ObjectParameter("SP_FilePath", typeof(string));
    
            var addRemarkParameter = addRemark != null ?
                new ObjectParameter("AddRemark", addRemark) :
                new ObjectParameter("AddRemark", typeof(string));
    
            var actionTypeParameter = actionType != null ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(string));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            var sP_UserIdParameter = sP_UserId.HasValue ?
                new ObjectParameter("SP_UserId", sP_UserId) :
                new ObjectParameter("SP_UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateMailroomRejectedDetails", sP_InwardIdParameter, sP_PONoParameter, sP_PlantNameParameter, sP_BarcodeParameter, sP_PurchaserGSTINParameter, sP_SupplierGSTINParameter, sP_InvoiceDateParameter, sP_InvoiceNumberParameter, sP_InvoiceTypeParameter, sP_IRNNumberParameter, sP_InvoiceCurrencyParameter, sP_InvoiceNetAmountParameter, sP_InvoiceGrossAmountParameter, sP_Address1Parameter, sP_Address2Parameter, sP_PriorityParameter, sP_FileNameParameter, sP_FilePathParameter, addRemarkParameter, actionTypeParameter, deptIDParameter, sP_UserIdParameter, sP_MESSAGE);
        }
    
        public virtual int USP_UpdatePdfToTiffStatus(string sP_InwardID)
        {
            var sP_InwardIDParameter = sP_InwardID != null ?
                new ObjectParameter("SP_InwardID", sP_InwardID) :
                new ObjectParameter("SP_InwardID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdatePdfToTiffStatus", sP_InwardIDParameter);
        }
    
        public virtual int USP_UpdateTrashDetails_VP(string inwardID, string remark, Nullable<int> userID, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateTrashDetails_VP", inwardIDParameter, remarkParameter, userIDParameter, msg);
        }
    
        public virtual int USP_UpdateVendorInvoiceFile(string inwardID, string fileOrgName, string fileName, string filePath, ObjectParameter msg)
        {
            var inwardIDParameter = inwardID != null ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(string));
    
            var fileOrgNameParameter = fileOrgName != null ?
                new ObjectParameter("FileOrgName", fileOrgName) :
                new ObjectParameter("FileOrgName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateVendorInvoiceFile", inwardIDParameter, fileOrgNameParameter, fileNameParameter, filePathParameter, msg);
        }
    
        public virtual int USP_UpdateVendorOCRDetails(string sP_InwardID, string sP_IRNNo, string sP_HSNCode)
        {
            var sP_InwardIDParameter = sP_InwardID != null ?
                new ObjectParameter("SP_InwardID", sP_InwardID) :
                new ObjectParameter("SP_InwardID", typeof(string));
    
            var sP_IRNNoParameter = sP_IRNNo != null ?
                new ObjectParameter("SP_IRNNo", sP_IRNNo) :
                new ObjectParameter("SP_IRNNo", typeof(string));
    
            var sP_HSNCodeParameter = sP_HSNCode != null ?
                new ObjectParameter("SP_HSNCode", sP_HSNCode) :
                new ObjectParameter("SP_HSNCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateVendorOCRDetails", sP_InwardIDParameter, sP_IRNNoParameter, sP_HSNCodeParameter);
        }
    
        public virtual int USP_UpdateVendorRegis_details(Nullable<int> regID, string docTypeKey, string docName, string docPath, string docSize, string docValue, string yesNoStatus, string companyBankAcc, string bankName, string iFSCCode, Nullable<int> delCount, Nullable<int> updateBy, ObjectParameter msg)
        {
            var regIDParameter = regID.HasValue ?
                new ObjectParameter("RegID", regID) :
                new ObjectParameter("RegID", typeof(int));
    
            var docTypeKeyParameter = docTypeKey != null ?
                new ObjectParameter("DocTypeKey", docTypeKey) :
                new ObjectParameter("DocTypeKey", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var docSizeParameter = docSize != null ?
                new ObjectParameter("DocSize", docSize) :
                new ObjectParameter("DocSize", typeof(string));
    
            var docValueParameter = docValue != null ?
                new ObjectParameter("DocValue", docValue) :
                new ObjectParameter("DocValue", typeof(string));
    
            var yesNoStatusParameter = yesNoStatus != null ?
                new ObjectParameter("YesNoStatus", yesNoStatus) :
                new ObjectParameter("YesNoStatus", typeof(string));
    
            var companyBankAccParameter = companyBankAcc != null ?
                new ObjectParameter("CompanyBankAcc", companyBankAcc) :
                new ObjectParameter("CompanyBankAcc", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var iFSCCodeParameter = iFSCCode != null ?
                new ObjectParameter("IFSCCode", iFSCCode) :
                new ObjectParameter("IFSCCode", typeof(string));
    
            var delCountParameter = delCount.HasValue ?
                new ObjectParameter("DelCount", delCount) :
                new ObjectParameter("DelCount", typeof(int));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateVendorRegis_details", regIDParameter, docTypeKeyParameter, docNameParameter, docPathParameter, docSizeParameter, docValueParameter, yesNoStatusParameter, companyBankAccParameter, bankNameParameter, iFSCCodeParameter, delCountParameter, updateByParameter, msg);
        }
    
        public virtual int USP_Vendor_LockUnlock(Nullable<int> sP_ProcessId, Nullable<int> sP_UserID, string sP_IsLock, ObjectParameter sP_MESSAGE)
        {
            var sP_ProcessIdParameter = sP_ProcessId.HasValue ?
                new ObjectParameter("SP_ProcessId", sP_ProcessId) :
                new ObjectParameter("SP_ProcessId", typeof(int));
    
            var sP_UserIDParameter = sP_UserID.HasValue ?
                new ObjectParameter("SP_UserID", sP_UserID) :
                new ObjectParameter("SP_UserID", typeof(int));
    
            var sP_IsLockParameter = sP_IsLock != null ?
                new ObjectParameter("SP_IsLock", sP_IsLock) :
                new ObjectParameter("SP_IsLock", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Vendor_LockUnlock", sP_ProcessIdParameter, sP_UserIDParameter, sP_IsLockParameter, sP_MESSAGE);
        }
    
        public virtual int USP_VInvoice_LockUnlock(string sP_ProcessId, Nullable<int> sP_UserID, string sP_IsLock, ObjectParameter sP_MESSAGE)
        {
            var sP_ProcessIdParameter = sP_ProcessId != null ?
                new ObjectParameter("SP_ProcessId", sP_ProcessId) :
                new ObjectParameter("SP_ProcessId", typeof(string));
    
            var sP_UserIDParameter = sP_UserID.HasValue ?
                new ObjectParameter("SP_UserID", sP_UserID) :
                new ObjectParameter("SP_UserID", typeof(int));
    
            var sP_IsLockParameter = sP_IsLock != null ?
                new ObjectParameter("SP_IsLock", sP_IsLock) :
                new ObjectParameter("SP_IsLock", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_VInvoice_LockUnlock", sP_ProcessIdParameter, sP_UserIDParameter, sP_IsLockParameter, sP_MESSAGE);
        }
    }
}
